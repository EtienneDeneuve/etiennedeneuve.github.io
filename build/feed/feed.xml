<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>XYZ Blog</title>
	<subtitle></subtitle>
	<link href="https://etienne.deneuve.xyz/feed/feed.xml" rel="self"/>
	<link href="etienne.deneuve.xyz"/>
	<updated>2015-12-16T14:44:50+01:00</updated>
	<id>https://etienne.deneuve.xyz</id>
	<author>
		<name>Etienne Deneuve</name>
		<email></email>
	</author>
	
	<entry>
		<title>Terraform AzureRM 2.0 Provider</title>
		<link href="/2020/02/25/terraform-azurerm-2/"/>
		<updated>2020-02-25T00:00:00+01:00</updated>
		<id>/2020/02/25/terraform-azurerm-2/</id>
		<content type="html">&lt;h1 id=&quot;new-azure-rm-provider-2.0&quot;&gt;New Azure RM Provider 2.0 &lt;a class=&quot;direct-link&quot; href=&quot;#new-azure-rm-provider-2.0&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This article will be updated every times I found something not yet documented on the 2.0 Azure RM provider for Terraform.&lt;/p&gt;
&lt;h2 id=&quot;new-mandatory&quot;&gt;New mandatory &lt;a class=&quot;direct-link&quot; href=&quot;#new-mandatory&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the past, the provider was optional, today, it is &lt;em&gt;mandatory&lt;/em&gt; !&lt;/p&gt;
&lt;p&gt;You need to write this part :&lt;/p&gt;
&lt;pre class=&quot;language-hcl&quot;&gt;&lt;code class=&quot;language-hcl&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;provider&lt;span class=&quot;token type variable&quot;&gt; &quot;azurerm&quot; &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;=2.0.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&#39;t add the &lt;code&gt;features {}&lt;/code&gt; your plan and deployment will fail.&lt;/p&gt;
&lt;p&gt;As today, the features block is the new way to activate some features :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;features block supports the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;key_vault - (Optional) A key_vault block as defined below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;virtual_machine - (Optional) A virtual_machine block as &amp;gt; defined below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;virtual_machine_scale_set - (Optional) A &amp;gt; virtual_machine_scale_set block as defined below.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>IaC &amp; Tests</title>
		<link href="/2020/02/07/infra-testing-easy-path/"/>
		<updated>2020-02-07T00:00:00+01:00</updated>
		<id>/2020/02/07/infra-testing-easy-path/</id>
		<content type="html">&lt;h1 id=&quot;iac-%26-tests&quot;&gt;IaC &amp;amp; Tests &lt;a class=&quot;direct-link&quot; href=&quot;#iac-%26-tests&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview &lt;a class=&quot;direct-link&quot; href=&quot;#overview&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was looking for the easiest way to test Azure infrastructure.&lt;br&gt;
I take a look into great project like Molecule, Terratest and so on.&lt;br&gt;
Even if they are very cool and powerful, I wanted to find something easier (or lazier).&lt;/p&gt;
&lt;p&gt;I already use pester for testing purpose, so I manage to use pester for testing Azure infrastructure,&lt;br&gt;
using the Gherkin syntax and I&#39;ll show you, how you can do that.&lt;/p&gt;
&lt;h2 id=&quot;workstation-preparation&quot;&gt;Workstation preparation &lt;a class=&quot;direct-link&quot; href=&quot;#workstation-preparation&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I work on 3 kind of platform : macOs, Ubuntu and Windows 10, and my tests are working on all of them.&lt;/p&gt;
&lt;p&gt;You will need to install :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PowerShell (6.2.3 at least)
&lt;ol&gt;
&lt;li&gt;Powershell Az module&lt;/li&gt;
&lt;li&gt;Pester (at least 4.9)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;VS Code
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=alexkrechik.cucumberautocomplete&quot;&gt;Gherkin plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell&quot;&gt;PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;install-powershell-and-modules&quot;&gt;Install Powershell and modules &lt;a class=&quot;direct-link&quot; href=&quot;#install-powershell-and-modules&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;powershell-6&quot;&gt;Powershell 6 &lt;a class=&quot;direct-link&quot; href=&quot;#powershell-6&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;h5 id=&quot;manual-installation&quot;&gt;Manual installation &lt;a class=&quot;direct-link&quot; href=&quot;#manual-installation&quot;&gt; &lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;First, download the suitable version of powershell for your system on GitHub. Yes, if you miss it, that is now fully open source.&lt;br&gt;
&lt;a href=&quot;https://github.com/PowerShell/PowerShell/releases&quot;&gt;https://github.com/PowerShell/PowerShell/releases&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;package-manager&quot;&gt;Package Manager &lt;a class=&quot;direct-link&quot; href=&quot;#package-manager&quot;&gt; &lt;/a&gt;&lt;/h5&gt;
&lt;h6 id=&quot;macos&quot;&gt;macOS &lt;a class=&quot;direct-link&quot; href=&quot;#macos&quot;&gt; &lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;If you use macOs, &lt;a href=&quot;https://brew.sh/&quot;&gt;brew&lt;/a&gt; can manage it  for you:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install powershell
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&quot;ubuntu&quot;&gt;Ubuntu &lt;a class=&quot;direct-link&quot; href=&quot;#ubuntu&quot;&gt; &lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;On Ubuntu, snap can do the job also :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo snap install powershell --classic
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&quot;windows&quot;&gt;Windows &lt;a class=&quot;direct-link&quot; href=&quot;#windows&quot;&gt; &lt;/a&gt;&lt;/h6&gt;
&lt;p&gt;On Windows, Chocolatey is working well:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;choco install pwsh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;modules&quot;&gt;Modules &lt;a class=&quot;direct-link&quot; href=&quot;#modules&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Installing module in PowerShell is quite easy. You only need to type the following :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Install-PackageProvider Nuget -ForceBootstrap -Force
Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
Update-Module
Install-Module -Name Pester -Force -SkipPublisherCheck
Install-Module -Name Az -force
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Some command may not be useful on your setup, but this way ensure that you have the latest version of each module&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code &lt;a class=&quot;direct-link&quot; href=&quot;#visual-studio-code&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can install Vs Code manually or by using a Package Manager using choco, snap or brew. I&#39;ll not detail this part.&lt;/p&gt;
&lt;h4 id=&quot;extensions-installation&quot;&gt;Extensions installation &lt;a class=&quot;direct-link&quot; href=&quot;#extensions-installation&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To install the extension, you can use the GUI of Vs Code or the cmdline. For Gui, take a look at the doc &lt;a href=&quot;https://code.visualstudio.com/docs/editor/extension-gallery&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the cmdline :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;code --install-extension alexkrechik.cucumberautocomplete
code --install-extension ms-vscode.powershell
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;on Linux and macOs, you&#39;ll need to add the following in your profile, adapt the path to Vs Code to yours :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bash&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; ~/.bash_profile
# Add Visual Studio Code (code)
export PATH=&amp;quot;\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin&amp;quot;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;zsh&lt;/strong&gt;:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; ~/.zsh_profile
# Add Visual Studio Code (code)
export PATH=&amp;quot;\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin&amp;quot;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;create-the-first-tests&quot;&gt;Create the first tests &lt;a class=&quot;direct-link&quot; href=&quot;#create-the-first-tests&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;pester%2C-gherkin-and-testing&quot;&gt;Pester, Gherkin and testing &lt;a class=&quot;direct-link&quot; href=&quot;#pester%2C-gherkin-and-testing&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First of all, you will need some detail on Pester, Gherkin and testing like I think they can be useful and easy as possible.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/pester/Pester&quot;&gt;Pester&lt;/a&gt;, is a world community framework for testing in Powershell. So, if you know a bit in PowerShell, you won&#39;t be lost at all. This module add some new function to do the magic of testing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cucumber.io/docs/gherkin/reference/&quot;&gt;Gherkin&lt;/a&gt;, is a syntax for BDD (Behavior-Driven Development) testing. To explain a bit, for me, in our infrastructure testing purpose, is to have some human readable scenario to show to management/customers.&lt;/p&gt;
&lt;p&gt;Fortunately, Pester support the Gherkin syntax using the &lt;code&gt;Invoke-Gherkin&lt;/code&gt; cmdlet and do a bit of magic for us.&lt;/p&gt;
&lt;h3 id=&quot;let&#39;s-play&quot;&gt;Let&#39;s play &lt;a class=&quot;direct-link&quot; href=&quot;#let&#39;s-play&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We need to create our workspace, so do it like that (Using PowerShell&#39;s Shell):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Set-Location ~
New-Item ./Documents/GherkinTests -type Directory
code ./Documents/GherkinTests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create few file :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;etienne_exo.feature &amp;lt;-- This is the Gherkin File&lt;/li&gt;
&lt;li&gt;etienne_exo.steps.ps1 &amp;lt;-- This is our magic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the Feature File write the following :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# GherkinTests/etienne_exo.feature
Feature: Validate Azure Deployment

  Scenario: We should have some subscriptions to work
    Given we list the subscriptions using powershell
    Then we should be able to have at least one
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# GherkinTests/etienne_exo.steps.ps1
Given &amp;quot;we list the subscriptions using powershell&amp;quot;{
  Get-AzSubscription | Should -not -throw
}

Then &amp;quot;we should be able to have at least one&amp;quot; {
  (Get-AzSubscription).Count | Should -Not -BeNullOrEmpty
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let&#39;s run that to check if the test are working or not :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;❯ Invoke-Gherkin
Pester v4.10.0
Executing all tests in &#39;/home/etienne/Documents/GherkinTests&#39;

Feature: Validate Azure Deployment

  Scenario: We should have some subscriptions to work
    [+] Given we list the subscriptions using powershell 6.17s
    [+] Then we should be able to have at least one 5.01s
Tests completed in 11.39s
Tests Passed: 2, Failed: 0, Skipped: 0, Pending: 0, Inconclusive: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok, tests are working, and we have something to show to customers/managment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wait, can&#39;t we do nothing better ? Are we lazy enough ?&lt;br&gt;
Of course, not, let&#39;s wait for the next blog part.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;azure-devops&quot;&gt;Azure Devops &lt;a class=&quot;direct-link&quot; href=&quot;#azure-devops&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;azure-devops-cli&quot;&gt;Azure Devops CLI &lt;a class=&quot;direct-link&quot; href=&quot;#azure-devops-cli&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Get a Personal Access Token here : &lt;code&gt;https://dev.azure.com/&amp;lt;YourOrganisation&amp;gt;/_usersSettings/tokens&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;az extension add --name azure-devops
az devops login 
# paste your PAT
az login
# with the sam
az account set -s &amp;lt;YOUR SUB&amp;gt;
az devops configure --defaults &#39;organization=https://dev.azure.com/etiennedeneuve&#39;
az devops project create --name GherkinTest
# Store the repo git url to configure the repo locally, you will need a SSH Key for that.
$repo=$(az repos list --project GherkinTest --query [].sshUrl -o tsv)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;configure-the-repo-locally&quot;&gt;Configure the repo locally &lt;a class=&quot;direct-link&quot; href=&quot;#configure-the-repo-locally&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd ~/GherkinTest
git init
git remote add origin $repo
git add .
git commit -m &#39;inital commit&#39;
git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;create-the-pipeline&quot;&gt;Create the pipeline &lt;a class=&quot;direct-link&quot; href=&quot;#create-the-pipeline&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;az pipelines create --name &amp;quot;GherkinTest&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Answer the questions like :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This command is in preview. It may be changed/removed in a future release.
Which template do you want to use for this pipeline?
 [1] Starter pipeline
 [2] Android
 [3] Ant
 [4] ASP.NET
 [5] ASP.NET Core
 [6] .NET Core Function App to Windows on Azure
 [7] ASP.NET Core (.NET Framework)
Please enter a choice [Default choice(1)]: Starter pipeline

Do you want to view/edit the template yaml before proceeding?
Please enter a choice [Default choice(1)]: Continue with generated yaml

Files to be added to your repository (1)
1) azure-pipelines.yml

How do you want to commit the files to the repository?
Please enter a choice [Default choice(1)]: Create a new branch for this commit and start a pull request.

Enter new branch name to create: features/cicd
Checking in file azure-pipelines.yml in the Azure repo c279436a-e2f4-4e01-8f41-a30f660f7515
Created a Pull Request - https://dev.azure.com/etiennedeneuve/6874897d-6d09-412e-b73b-4b2966c04b64/_apis/git/repositories/c279436a-e2f4-4e01-8f41-a30f660f7515/pullRequests/1
Successfully created a pipeline with Name: GherkinTest, Id: 25.
{
  &amp;quot;agentSpecification&amp;quot;: null,
  &amp;quot;buildNumber&amp;quot;: &amp;quot;20200214.1&amp;quot;,
  &amp;quot;buildNumberRevision&amp;quot;: 1,
  &amp;quot;controller&amp;quot;: null
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;create-the-service-endpoint-for-azure-rm-subscription&quot;&gt;Create the Service Endpoint for Azure RM Subscription &lt;a class=&quot;direct-link&quot; href=&quot;#create-the-service-endpoint-for-azure-rm-subscription&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First we need to create a SPN in Azure AD :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;az ad sp create-for-rbac --name AzureDevops
Changing &amp;quot;AzureDevops&amp;quot; to a valid URI of &amp;quot;http://AzureDevops&amp;quot;, which is the required format used for service principal names
Creating a role assignment under the scope of &amp;quot;/subscriptions/1417c648-XXXX&amp;quot;
 
{
  &amp;quot;appId&amp;quot;: &amp;quot;41176fe8-XXXXX&amp;quot;,
  &amp;quot;displayName&amp;quot;: &amp;quot;AzureDevops&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;http://AzureDevops&amp;quot;,
  &amp;quot;password&amp;quot;: &amp;quot;7eaeb380-XXXXX&amp;quot;,
  &amp;quot;tenant&amp;quot;: &amp;quot;06329ce4-XXXX&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take note of the appId, Name, Password and Tenant.&lt;/p&gt;
&lt;p&gt;Now, list your subscriptions :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;az account show
{
  &amp;quot;environmentName&amp;quot;: &amp;quot;AzureCloud&amp;quot;,
  &amp;quot;id&amp;quot;: &amp;quot;1417c648-XXXXX&amp;quot;,
  &amp;quot;isDefault&amp;quot;: true,
  &amp;quot;name&amp;quot;: &amp;quot;Microsoft XXXX&amp;quot;,
  &amp;quot;state&amp;quot;: &amp;quot;Enabled&amp;quot;,
  &amp;quot;tenantId&amp;quot;: &amp;quot;06329ce4-XXXX&amp;quot;,
  &amp;quot;user&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;etienne@deneuve.xyz&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;user&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take note of the Id, Name, and Tenant.&lt;/p&gt;
&lt;p&gt;And then create the service endpoint in Azure DevOps :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; az devops service-endpoint azurerm create --name &#39;Azure MVP&#39; `
&amp;gt;&amp;gt; --azure-rm-tenant-id &amp;quot;YourTenantId&amp;quot; `
&amp;gt;&amp;gt;     --azure-rm-service-principal-id &amp;quot;AppID&amp;quot; `
&amp;gt;&amp;gt;     --azure-rm-subscription-id &amp;quot;SubID&amp;quot; `
&amp;gt;&amp;gt;     --azure-rm-subscription-name &amp;quot;Name of the Sub&amp;quot;
Azure RM service principal key: &amp;quot;Password&amp;quot;
Confirm Azure RM service principal key: &amp;quot;Password&amp;quot;
{
  &amp;quot;administratorsGroup&amp;quot;: null,
   &amp;lt; shortened &amp;gt;
  &amp;quot;type&amp;quot;: &amp;quot;azurerm&amp;quot;,
  &amp;quot;url&amp;quot;: &amp;quot;https://management.azure.com/&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;configure-the-pipeline&quot;&gt;Configure the pipeline &lt;a class=&quot;direct-link&quot; href=&quot;#configure-the-pipeline&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now, checkout to the newly created branch :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# change branch
git checkout features/cicd
# get latests info from remote
git pull
# open code in the current folder
code .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following snippet into &lt;code&gt;azure-pipelines.yml&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./azure-pipelines.yml
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: &#39;windows-latest&#39;

steps:
- task: AzurePowerShell@5
  inputs:
    azurePowerShellVersion: LatestVersion
    azureSubscription: &#39;Azure MVP&#39;
    Inline: |
      Install-Module -Name Pester -Force
    ScriptType: InlineScript
    pwsh: true
    workingDirectory: $(Build.Repository.LocalPath)
  displayName: &#39;Install Pester&#39;

- task: AzurePowerShell@5
  inputs:
    azurePowerShellVersion: LatestVersion
    azureSubscription: &#39;Azure MVP&#39;
    Inline: |
      Invoke-Gherkin -OutputFile result.xml -OutputFormat NUnitXml
    ScriptType: InlineScript
    pwsh: true
    workingDirectory: $(Build.Repository.LocalPath)
  displayName: &#39;Launch Test&#39;

- task: PublishTestResults@2
  inputs:
    buildConfiguration: Azure
    buildPlatform: Azure
    publishRunAttachments: true
    testResultsFiles: result.xml
    testResultsFormat: NUnit
    testRunTitle: ValidateAzure
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commit the file :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add azure-pipelines.yaml
git commit -m &#39;feat: add cicd for tests&#39;
git push origin features/cicd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go in your Azure Devops project, select your new pipeline, and go in Tests, you should have something like my public repo :&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/etiennedeneuve/gherkintest/_build/results?buildId=357&amp;amp;view=ms.vss-test-web.build-test-results-tab&quot;&gt;Azure Devops&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Et Voila!&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;working-with-the-tests&quot;&gt;Working with the tests &lt;a class=&quot;direct-link&quot; href=&quot;#working-with-the-tests&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now, if we want to deploy something in our new infra, we will need to write the tests before deploying the resources themselves.&lt;/p&gt;
&lt;h3 id=&quot;adding-some-tests&quot;&gt;Adding some tests &lt;a class=&quot;direct-link&quot; href=&quot;#adding-some-tests&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this scenario, we want to deploy a VM, in our subscription. Let&#39;s do a quick list of what we should have after a successful deployment :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 Subscription&lt;/li&gt;
&lt;li&gt;1 Resource Group&lt;/li&gt;
&lt;li&gt;1 Virtual Network&lt;/li&gt;
&lt;li&gt;1 Subnet&lt;/li&gt;
&lt;li&gt;1 Network Interface&lt;/li&gt;
&lt;li&gt;1 Disk&lt;/li&gt;
&lt;li&gt;1 VM&lt;/li&gt;
&lt;li&gt;Optionally: 1 Public IP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With our list, we can now write the test we want, in the feature file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# GherkinTests/etienne_exo.feature
Feature: Validate Azure Deployment

  Scenario: Someone start a new vm deployment
    Given someone start a new vm deployment in the subscription
    When the deployment is completed we should have 1 resource group
    Then we should have 1 Virtual Network
    And 1 Subnet
    And 1 Network interface
    And 1 Disk
    And 1 VM
    And 1 Public IP
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, in our steps.ps1 file we will update it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# GherkinTests/etienne_exo.steps.ps1
Given &amp;quot;someone start a new vm deployment in the subscription&amp;quot;{
  Get-AzSubscription | Should -not -throw
}

When &amp;quot;the deployment is completed we should have 1 resource group&amp;quot; {
  Get-AzResourceGroup -name RG-GherkinTests | Should -exists
}

Then &amp;quot;We should have 1 Virtual Network&amp;quot;{

}
And &amp;quot;1 Subnet&amp;quot;{

}
And &amp;quot;1 Network interface&amp;quot;{

}
And &amp;quot;1 Disk&amp;quot;{

}
And &amp;quot;1 VM&amp;quot;{

}
And &amp;quot;1 Public IP&amp;quot;{

}
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Lancement de Powershell du Zéro</title>
		<link href="/2019/01/22/lancement-de-powershell-du-zero/"/>
		<updated>2019-01-22T11:45:35+01:00</updated>
		<id>/2019/01/22/lancement-de-powershell-du-zero/</id>
		<content type="html">&lt;p&gt;Bonjour à tous,&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Je vous invite à participer à notre meetup en ligne au sujet de Powershell, nous reprenons tout depuis le début!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Pour plus d&#39;info :&lt;a href=&quot;https://powershell-du-zero.fr/2019/01/21/meetup.html&quot;&gt; https://powershell-du-zero.fr/2019/01/21/meetup.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Vous pouvez également nous suivre sur Twitter : &lt;a href=&quot;https://twitter.com/PowershellZ&quot;&gt;https://twitter.com/PowershellZ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Bonne journée!!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to install Azure Stack Dev kit in a breeze
</title>
		<link href="/2018/12/05/adsk-in-a-breeze/"/>
		<updated>2018-12-05T13:35:17+01:00</updated>
		<id>/2018/12/05/adsk-in-a-breeze/</id>
		<content type="html">&lt;h1 id=&quot;azure-stack&quot;&gt;Azure Stack &lt;a class=&quot;direct-link&quot; href=&quot;#azure-stack&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Azure Stack is an on premise appliance made by Microsoft. The main goal of Azure Stack isn&#39;t to have a new Hypervisor like vSphere or Hyper-V, but to have real cloud on prem. If you want to deploy only Virtual Machines, you aren&#39;t on the good path.&lt;/p&gt;
&lt;p&gt;This article is summary for installing and configuring an Azure Stack with a lot of PowerShell coming from GitHub. With all the scripts you may have a running Azure Stack.&lt;/p&gt;
&lt;h2 id=&quot;hardware-prerequisites&quot;&gt;Hardware prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;#hardware-prerequisites&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You need a server with at least the following configuration :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Component&lt;/th&gt;
&lt;th&gt;Minimum&lt;/th&gt;
&lt;th&gt;Recommended&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Disk drives: Operating System&lt;/td&gt;
&lt;td&gt;1 OS disk with minimum of 200 GB available for system partition (SSD or HDD)&lt;/td&gt;
&lt;td&gt;1 OS disk with minimum of 200 GB available for system partition (SSD or HDD)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disk drives: General development kit data*&lt;/td&gt;
&lt;td&gt;4 disks.  Each disk provides a minimum of 140 GB of capacity (SSD or HDD). All available disks are used.&lt;/td&gt;
&lt;td&gt;4 disks. Each disk provides a minimum of 250 GB of capacity (SSD or HDD). All available disks are used.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Compute: CPU&lt;/td&gt;
&lt;td&gt;Dual-Socket: 12 Physical Cores (total)&lt;/td&gt;
&lt;td&gt;Dual-Socket: 16 Physical Cores (total)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Compute: Memory&lt;/td&gt;
&lt;td&gt;96 GB RAM&lt;/td&gt;
&lt;td&gt;128 GB RAM (This is the minimum to support PaaS resource providers.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Compute: BIOS&lt;/td&gt;
&lt;td&gt;Hyper-V Enabled (with SLAT support)&lt;/td&gt;
&lt;td&gt;Hyper-V Enabled (with SLAT support)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Network: NIC&lt;/td&gt;
&lt;td&gt;Windows Server 2012 R2 Certification required for NIC; no specialized features required&lt;/td&gt;
&lt;td&gt;Windows Server 2012 R2 Certification required for NIC; no specialized features required&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HW logo certification&lt;/td&gt;
&lt;td&gt;Certified for Windows Server 2012 R2&lt;/td&gt;
&lt;td&gt;Certified for Windows Server 2016&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Source : &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-stack/asdk/asdk-deploy-considerations#hardware&quot;&gt;docs.microsoft.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can deploy Azure Stack Developpement kit in Azure using a E16s v3&lt;/p&gt;
&lt;h2 id=&quot;windows-installation&quot;&gt;Windows Installation &lt;a class=&quot;direct-link&quot; href=&quot;#windows-installation&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You need to install a Windows Server 2016 with a full disk (no partition). As the installer will boot on a VHD on top of the system root, if the second drive isn&#39;t big enough the installer will not thrown an error and you will get a bad installation of Azure Stack.&lt;/p&gt;
&lt;p&gt;You need to download the following files :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Script to check the requirements (not mandatory, but useful) &lt;a href=&quot;https://gallery.technet.microsoft.com/Deployment-Checker-for-50e0f51b&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Windows Server 2016 Eval Iso &lt;a href=&quot;https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2016&quot;&gt;lien&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Azure Stack Development Kit &lt;a href=&quot;https://azure.microsoft.com/fr-fr/overview/azure-stack/development-kit/?v=try&quot;&gt;lien&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;installation&quot;&gt;Installation &lt;a class=&quot;direct-link&quot; href=&quot;#installation&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;phase-1&quot;&gt;Phase 1 &lt;a class=&quot;direct-link&quot; href=&quot;#phase-1&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Extract the ADSK using AzureStackDevelopmentKit.exe&lt;/li&gt;
&lt;li&gt;Copy &amp;quot;CloudBuilder.vhdx&amp;quot; on the root of you root (c:)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;phase-2&quot;&gt;Phase 2 &lt;a class=&quot;direct-link&quot; href=&quot;#phase-2&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In a Shell Powershell as Administrator :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Variables
$Uri = &amp;amp;#039;https://raw.githubusercontent.com/Azure/AzureStack-Tools/master/Deployment/asdk-installer.ps1&amp;amp;#039;
$LocalPath = &amp;amp;#039;C:AzureStack_Installer&amp;amp;#039;
# Create folder
New-Item $LocalPath -Type directory
# Enforce usage of TLSv1.2 to download from GitHub
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
# Download file
Invoke-WebRequest $uri -OutFile ($LocalPath + &amp;amp;#039;&amp;amp;#039; + &amp;amp;#039;asdk-installer.ps1&amp;amp;#039;)
cd $LocalPath
.asdk-installer.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Follow &amp;quot;Prepare Environnement&amp;quot;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Browse to your &amp;quot;cloudbuilder.vhdx&amp;quot; from phase 1 (c:CloudBuilder.vhdx), without ticking the Add Drivers (if your hardware is fully supported as a Dell ASDK Ready Node for example)&lt;/li&gt;
&lt;li&gt;Submit your administrator&#39;s credentials of the local machine.&lt;/li&gt;
&lt;li&gt;You can add a Computer Name for the Azure Stack, if you don&#39;t it will be generated. You must choose something different than AzureStack&lt;/li&gt;
&lt;li&gt;If you have a Dhcp, you don&#39;t need to add a Static Configuration, otherwise, add a static configuration instead (with DNS and Gateway)&lt;/li&gt;
&lt;li&gt;Reboot&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;phase-3&quot;&gt;Phase 3 &lt;a class=&quot;direct-link&quot; href=&quot;#phase-3&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;While the host is rebooting, if the Windows bootmanager ask to choose between Azure Stack and Windows Server 2016, choose Azure Stack.&lt;/p&gt;
&lt;p&gt;Login in the Azure Stack, take care of the keyboard layout, by default it&#39;s a QWERTY.&lt;/p&gt;
&lt;p&gt;In a PowerShell Shell, as Administrator launch the ASDK deployment. (Not in a Powershell ISE)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd C:CloudDeploymentSetup     
$adminpass = Get-Credential Administrator  -Message &amp;quot;Please provide the password for Local Administrator&amp;quot;
$aadcred = Get-Credential &amp;quot;svc_azure_stack_installer@yourazuread.onmicrosoft.com&amp;quot; -Message &amp;quot;Please provide the password for Azure AD&amp;quot;
.InstallAzureStackPOC.ps1 -AdminPassword $adminpass.Password `
    -InfraAzureDirectoryTenantName &amp;quot;yourazuread.onmicrosoft.com&amp;quot; `
    -TimeServer &amp;quot;13.79.239.69&amp;quot;`
    -InfraAzureDirectoryTenantAdminCredential $aadcred`
    -DNSForwarder &amp;quot;8.8.8.8&amp;quot; `
    -NatIPv4Address &amp;quot;10.0.0.9&amp;quot; `
    -NatIPv4DefaultGateway &amp;quot;10.0.0.14&amp;quot; `
    -NatIPv4Subnet &amp;quot;10.0.0.0/28&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Warning: This process take few hours (between 10 and 15)&lt;/p&gt;
&lt;p&gt;&amp;gt; You can change parameter in the script, but double check they are correct. If you have trouble, you may need to restart the whole process.&lt;br&gt;
&amp;gt; The nat parameters must be changed to reflect your network.&lt;/p&gt;
&lt;h4 id=&quot;phase-4&quot;&gt;Phase 4 &lt;a class=&quot;direct-link&quot; href=&quot;#phase-4&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;After the process is complete, you have now a cool ASDK, with nothing in it. You need to deploy services as a Cloud Operator&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Login with azurestackazurestackadmin on the ASDK host&lt;/li&gt;
&lt;li&gt;Get the path of your Windows Server 2016, mine is &#39;D:ISO&#39;&lt;/li&gt;
&lt;li&gt;Open a new Powershell as Administator :&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;# Create directory on the root drive.
New-Item -ItemType Directory -Force -Path &amp;quot;C:ConfigASDK&amp;quot;
Set-Location &amp;quot;C:ConfigASDK&amp;quot;

# Download the ConfigASDK Script.
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Invoke-Webrequest http://bit.ly/configasdk -UseBasicParsing -OutFile ConfigASDK.ps1

.ConfigASDK.ps1 -azureDirectoryTenantName &amp;quot;yourazuread.onmicrosoft.com&amp;quot; -authenticationType AzureAD `
    -downloadPath &amp;quot;D:ASDKfiles&amp;quot; -ISOPath &amp;quot;D:ISOWS2016EVAL.iso&amp;quot; -azureStackAdminPwd &#39;Azure Stack Administrator password&#39; `
    -VMpwd &#39;a new password&#39; -azureAdUsername &amp;quot;svc_azure_stack_installer@yourazuread.onmicrosoft.com&amp;quot; -azureAdPwd &#39;Azure Ad password&#39; `
    -registerASDK -useAzureCredsForRegistration -azureRegSubId &amp;quot;Id de la subscription Azure&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;phase-5&quot;&gt;Phase 5 &lt;a class=&quot;direct-link&quot; href=&quot;#phase-5&quot;&gt; &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Open a Browser on your ASDK Host and go to &lt;code&gt;https://adminportal.local.azurestack.external&lt;/code&gt; or the &amp;quot;public&amp;quot; endpoint &lt;code&gt;https://portal.local.azurestack.external&lt;/code&gt; and enjoy.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Some Az Cli 2.0 bulk commands
</title>
		<link href="/2018/07/02/az-cli-20-tricks/"/>
		<updated>2018-07-02T14:35:17+02:00</updated>
		<id>/2018/07/02/az-cli-20-tricks/</id>
		<content type="html">&lt;h1 id=&quot;az-cli-2.0&quot;&gt;Az CLI 2.0 &lt;a class=&quot;direct-link&quot; href=&quot;#az-cli-2.0&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;how-to-delete-multiple-managed-disk-at-once-%3F&quot;&gt;How to delete multiple managed disk at once ? &lt;a class=&quot;direct-link&quot; href=&quot;#how-to-delete-multiple-managed-disk-at-once-%3F&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;az disk list -g YourRG --query [].name --output tsv | xargs -n 1 az disk delete -g YourRG --yes -n
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Dynamic update of Bind9 server in Azure with Terraform !
</title>
		<link href="/2018/07/02/how-to-manage-dns-terraform/"/>
		<updated>2018-07-02T14:35:17+02:00</updated>
		<id>/2018/07/02/how-to-manage-dns-terraform/</id>
		<content type="html">&lt;h1 id=&quot;terraform-your-dns&quot;&gt;Terraform your DNS &lt;a class=&quot;direct-link&quot; href=&quot;#terraform-your-dns&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In this blog post, I post my article posted on Cellenza Blog, translated in English. The french version is &lt;a href=&quot;https://blog.cellenza.com/cloud-2/azure/comment-utiliser-hashicorp-terraform-pour-gerer-vos-dns-bind9-dans-azure/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The purpose of this blog post is to deploy and configure a Bind9 DNS Server in your Azure subscription and make it able to receive DNS Update form Terraform. I&#39;m pretty sure that you will understand why it&#39;s so cool ! If not, the goal is to be able to have local DNS that you can manage when you deploy new resources in Azure. Of course, it can work in many other cloud or on premise environment as Bind9 is real standard DNS.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The way is give is volontary simplified. To make it good for production you need to add a control VM and not expose your DNS directly with a public IP. It&#39;s only a proof of concept&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;terraform-dns-provider&quot;&gt;Terraform DNS Provider &lt;a class=&quot;direct-link&quot; href=&quot;#terraform-dns-provider&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In Terraform plugins, there&#39;s a DNS Provider who help to manipulate a DNS correctly setted according to RFC 2136 and 2845. Thoses RFC normalize dns dynamic updates, this is normally used with a DHCP.&lt;/p&gt;
&lt;h2 id=&quot;cloud-init&quot;&gt;Cloud Init &lt;a class=&quot;direct-link&quot; href=&quot;#cloud-init&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will use &lt;a href=&quot;https://cloud-init.io/&quot;&gt;Cloud Init&lt;/a&gt; for primary setup of our Labs, Cloud Init will be lauchned in the very low boot stage.&lt;/p&gt;
&lt;h2 id=&quot;building-the-folder-structure-for-the-poc&quot;&gt;Building the folder structure for the POC &lt;a class=&quot;direct-link&quot; href=&quot;#building-the-folder-structure-for-the-poc&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Open Visual Studio Code and create a base folder &lt;code&gt;$workdir&lt;/code&gt; and create the folling files &amp;amp; folders :&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;- bind&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   - main.tf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   - files/cloudconfig.tpl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   - data.tf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   - variables.tf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   - provider.tf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;- dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   - main.tf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   - provider.tf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;deploy-bind9-vm&quot;&gt;Deploy Bind9 VM &lt;a class=&quot;direct-link&quot; href=&quot;#deploy-bind9-vm&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;terraform&quot;&gt;Terraform &lt;a class=&quot;direct-link&quot; href=&quot;#terraform&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the file &lt;code&gt;bind/provider.tf&lt;/code&gt;, add this :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;provider &amp;amp;quot;azurerm&amp;amp;quot; {
version = &amp;amp;quot;1.6.0&amp;amp;quot;
}

provider &amp;amp;quot;template&amp;amp;quot; {
version = &amp;amp;quot;1.0.0&amp;amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;bind/data.tf&lt;/code&gt;, add this :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data &amp;amp;quot;template_cloudinit_config&amp;amp;quot; &amp;amp;quot;config&amp;amp;quot; {
gzip = true
base64_encode = true

part {
content_type = &amp;amp;quot;text/cloud-config&amp;amp;quot;
content = &amp;amp;quot;${data.template_file.cloudconfig.rendered}&amp;amp;quot;
}
}

data &amp;amp;quot;template_file&amp;amp;quot; &amp;amp;quot;cloudconfig&amp;amp;quot; {
template = &amp;amp;quot;${file(&amp;amp;quot;cloudconfig.tpl&amp;amp;quot;)}&amp;amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And in &lt;code&gt;bind/main.tf&lt;/code&gt; add this (don&#39;t forget to change ```` by a secure password) :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;resource &amp;amp;quot;azurerm_resource_group&amp;amp;quot; &amp;amp;quot;tf-bind&amp;amp;quot; {
name = &amp;amp;quot;RG-bind&amp;amp;quot;
location = &amp;amp;quot;West Europe&amp;amp;quot;

tags = {
Project = &amp;amp;quot;bind&amp;amp;quot;
}
}

resource &amp;amp;quot;azurerm_virtual_network&amp;amp;quot; &amp;amp;quot;tf-vnet&amp;amp;quot; {
name = &amp;amp;quot;vnet-bind&amp;amp;quot;
location = &amp;amp;quot;${azurerm_resource_group.tf-bind.location}&amp;amp;quot;
resource_group_name = &amp;amp;quot;${azurerm_resource_group.tf-bind.name}&amp;amp;quot;
address_space = [&amp;amp;quot;10.0.0.0/16&amp;amp;quot;]

tags = {
Project = &amp;amp;quot;bind&amp;amp;quot;
}
}

resource &amp;amp;quot;azurerm_subnet&amp;amp;quot; &amp;amp;quot;tf-snet&amp;amp;quot; {
name = &amp;amp;quot;main&amp;amp;quot;
resource_group_name = &amp;amp;quot;${azurerm_resource_group.tf-bind.name}&amp;amp;quot;
virtual_network_name = &amp;amp;quot;${azurerm_virtual_network.tf-vnet.name}&amp;amp;quot;
address_prefix = &amp;amp;quot;10.0.0.0/24&amp;amp;quot;
}

resource &amp;amp;quot;azurerm_virtual_machine&amp;amp;quot; &amp;amp;quot;tf-vm-bind&amp;amp;quot; {
count = 1
name = &amp;amp;quot;bind-vm0${count.index}&amp;amp;quot;
location = &amp;amp;quot;${azurerm_resource_group.tf-bind.location}&amp;amp;quot;
resource_group_name = &amp;amp;quot;${azurerm_resource_group.tf-bind.name}&amp;amp;quot;
network_interface_ids = [&amp;amp;quot;${element(azurerm_network_interface.tf-nic.*.id, count.index)}&amp;amp;quot;]
vm_size = &amp;amp;quot;Standard_B1ms&amp;amp;quot;
delete_os_disk_on_termination = true

storage_image_reference {
publisher = &amp;amp;quot;Canonical&amp;amp;quot;
offer = &amp;amp;quot;UbuntuServer&amp;amp;quot;
sku = &amp;amp;quot;16.04-LTS&amp;amp;quot;
version = &amp;amp;quot;latest&amp;amp;quot;
}

storage_os_disk {
name = &amp;amp;quot;dsk-vm0${count.index}&amp;amp;quot;
caching = &amp;amp;quot;ReadWrite&amp;amp;quot;
create_option = &amp;amp;quot;FromImage&amp;amp;quot;
managed_disk_type = &amp;amp;quot;Standard_LRS&amp;amp;quot;
}

os_profile {
computer_name = &amp;amp;quot;bind-vm0${count.index}&amp;amp;quot;
admin_username = &amp;amp;quot;edeneuve&amp;amp;quot;
admin_password = &amp;amp;quot;&amp;amp;quot;
custom_data = &amp;amp;quot;${data.template_cloudinit_config.config.rendered}&amp;amp;quot;
}

os_profile_linux_config {
disable_password_authentication = false
}

tags = {
Project = &amp;amp;quot;bind&amp;amp;quot;
}
}

resource &amp;amp;quot;azurerm_network_interface&amp;amp;quot; &amp;amp;quot;tf-nic&amp;amp;quot; {
count = &amp;amp;quot;1&amp;amp;quot;
name = &amp;amp;quot;nic-vm${count.index}&amp;amp;quot;
resource_group_name = &amp;amp;quot;${azurerm_resource_group.tf-bind.name}&amp;amp;quot;
location = &amp;amp;quot;${azurerm_resource_group.tf-bind.location}&amp;amp;quot;

ip_configuration {
name = &amp;amp;quot;ipconfig&amp;amp;quot;
private_ip_address_allocation = &amp;amp;quot;dynamic&amp;amp;quot;
subnet_id = &amp;amp;quot;${azurerm_subnet.tf-snet.id}&amp;amp;quot;
public_ip_address_id = &amp;amp;quot;${element(azurerm_public_ip.MyResource.*.id, count.index)}&amp;amp;quot;
}

tags = {
Project = &amp;amp;quot;bind&amp;amp;quot;
}
}

resource &amp;amp;quot;azurerm_public_ip&amp;amp;quot; &amp;amp;quot;MyResource&amp;amp;quot; {
count = &amp;amp;quot;1&amp;amp;quot;
name = &amp;amp;quot;pip-vm${count.index}&amp;amp;quot;
resource_group_name = &amp;amp;quot;${azurerm_resource_group.tf-bind.name}&amp;amp;quot;
location = &amp;amp;quot;${azurerm_resource_group.tf-bind.location}&amp;amp;quot;
public_ip_address_allocation = &amp;amp;quot;dynamic&amp;amp;quot;

tags = {
Project = &amp;amp;quot;bind&amp;amp;quot;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the cloud config template &lt;code&gt;bind/files/cloudconfig.tpl&lt;/code&gt;, add this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#cloud-config
package_upgrade: true
packages:
- bind9
- dnsutils
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s deploy !&lt;br&gt;
First connect you to Azure using &lt;code&gt;az login&lt;/code&gt;, secondly launch &lt;code&gt;terraform init&lt;/code&gt; from the bind folder, then test your copy/paste with &lt;code&gt;terraform plan&lt;/code&gt; and finally &lt;code&gt;terraform apply&lt;/code&gt;. Take a coffee, your Bind server is under construction.&lt;/p&gt;
&lt;h3 id=&quot;bind-setup&quot;&gt;Bind setup &lt;a class=&quot;direct-link&quot; href=&quot;#bind-setup&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Connect you on the newly deploy vm using SSH and go to &lt;code&gt;/etc/bind/&lt;/code&gt; and generate a key using &lt;code&gt;sudo rndc-confgen&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You should now have a &lt;code&gt;rdnc.key&lt;/code&gt; within the current folder and with some content like :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo cat /etc/bind/rndc.key

key &amp;amp;quot;rndc-key&amp;amp;quot; {
algorithm hmac-md5;
secret &amp;amp;quot;REDACTED&amp;amp;quot;;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we will edit the config file of Bind9, the main config is &lt;code&gt;named.conf&lt;/code&gt;. You need to add a reference to the new &lt;code&gt;rndc.key&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include &amp;amp;quot;/etc/bind/rndc.key&amp;amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, create new zone in &lt;code&gt;named.conf.local&lt;/code&gt; (You can change the &lt;code&gt;toto.int.local.&lt;/code&gt; by something different :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;zone &amp;amp;quot;toto.int.local.&amp;amp;quot; {
type master;
file &amp;amp;quot;/etc/bind/zones/db.toto.int.local&amp;amp;quot;;
update-policy {
grant rndc-key zonesub any;
};
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, create a new zone file in a subfolder called &lt;code&gt;zones&lt;/code&gt; (create it) and add the following content in a zone file &lt;code&gt;/etc/bind/zones/db.toto.int.local&lt;/code&gt; (name must match with the &amp;quot;file&amp;quot; directive in the &lt;code&gt;named.conf.local&lt;/code&gt;) :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NS must match your server hostname and records must be correct to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ORIGIN .
$TTL 3600       ; 1 hour
toto.int.local          IN SOA  ns1.toto.int.local. root.toto.int.local. (
                                2012033116 ; serial
                                3600       ; refresh (1 hour)
                                1800       ; retry (30 minutes)
                                604800     ; expire (1 week)
                                43200      ; minimum (12 hours)
                                )
                        NS      ns1.toto.int.local.
                        NS      ns2.toto.int.local.
$ORIGIN toto.int.local.
$TTL 3600       ; 1 hour
ns1                     A       137.117.141.166
ns2                     A       137.117.141.166
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As Bind need to create and modify the content in the folder you need to setup right according to :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo chown -R root:bind ./zones
sudo chmod -R 640 ./zones
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then restart bind using :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl restart bind9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check the bind logs using :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tail /var/log/syslog | grep named

Jun 15 07:44:25 bind-vm00 named[4233]: automatic empty zone: 255.255.255.255.IN-ADDR.ARPA
Jun 15 07:44:25 bind-vm00 named[4233]: automatic empty zone: 0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.IP6.ARPA
Jun 15 07:44:25 bind-vm00 named[4233]: automatic empty zone: 1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.IP6.ARPA
Jun 15 07:44:25 bind-vm00 named[4233]: automatic empty zone: D.F.IP6.ARPA
Jun 15 07:44:25 bind-vm00 named[4233]: automatic empty zone: 8.E.F.IP6.ARPA
Jun 15 07:44:25 bind-vm00 named[4233]: automatic empty zone: 9.E.F.IP6.ARPA
Jun 15 07:44:25 bind-vm00 named[4233]: automatic empty zone: A.E.F.IP6.ARPA
Jun 15 07:44:25 bind-vm00 named[4233]: automatic empty zone: B.E.F.IP6.ARPA
Jun 15 07:44:25 bind-vm00 named[4233]: automatic empty zone: 8.B.D.0.1.0.0.2.IP6.ARPA
Jun 15 07:44:25 bind-vm00 named[4233]: automatic empty zone: EMPTY.AS112.ARPA
Jun 15 07:44:25 bind-vm00 named[4233]: configuring command channel from &amp;amp;#039;/etc/bind/rndc.key&amp;amp;#039;
Jun 15 07:44:25 bind-vm00 named[4233]: command channel listening on 127.0.0.1#953
Jun 15 07:44:25 bind-vm00 named[4233]: configuring command channel from &amp;amp;#039;/etc/bind/rndc.key&amp;amp;#039;
Jun 15 07:44:25 bind-vm00 named[4233]: command channel listening on ::1#953
Jun 15 07:44:25 bind-vm00 named[4233]: managed-keys-zone: loaded serial 13
Jun 15 07:44:25 bind-vm00 named[4233]: zone 0.in-addr.arpa/IN: loaded serial 1
Jun 15 07:44:25 bind-vm00 named[4233]: zone 127.in-addr.arpa/IN: loaded serial 1
Jun 15 07:44:25 bind-vm00 named[4233]: zone 255.in-addr.arpa/IN: loaded serial 1
Jun 15 07:44:25 bind-vm00 named[4233]: zone localhost/IN: loaded serial 2
Jun 15 07:44:25 bind-vm00 named[4233]: zone toto.int.local/IN: loaded serial 2012033116
Jun 15 07:44:25 bind-vm00 named[4233]: all zones loaded
Jun 15 07:44:25 bind-vm00 named[4233]: running
Jun 15 07:44:25 bind-vm00 named[4233]: zone toto.int.local/IN: sending notifies (serial 2012033116)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AppArmor need to be updated to let bind change the zones, so you need to set it. To set AppArmor, you need to change the file &lt;code&gt;/etc/apparmor.d/usr.sbin.named&lt;/code&gt; and add the line &lt;code&gt;/etc/bind/zones/** rw,&lt;/code&gt; in this part :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat /etc/apparmor.d/usr.sbin.named
[...]
# /etc/bind should be read-only for bind
# /var/lib/bind is for dynamically updated zone (and journal) files.
# /var/cache/bind is for slave/stub data, since we&amp;amp;#039;re not the origin of it.
# See /usr/share/doc/bind9/README.Debian.gz
/etc/bind/** r,
/etc/bind/zones/** rw,
/var/lib/bind/** rw,
/var/lib/bind/ rw,
/var/cache/bind/** lrw,
/var/cache/bind/ rw,
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the modification restart AppArmor deamon with &lt;code&gt;sudo systemctl restart apparmor&lt;/code&gt;, then check the named profile is loaded &lt;code&gt;aa-status&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aa-status
apparmor module is loaded.
14 profiles are loaded.
14 profiles are in enforce mode.
/sbin/dient
/usr/bin/lxc-start
/usr/lib/NetworkManager/nm-dhcp-client.action
/usr/lib/NetworkManager/nm-dhcp-helper
/usr/lib/connman/scripts/dient-script
/usr/lib/lxd/lxd-bridge-proxy
/usr/lib/snapd/snap-confine
/usr/lib/snapd/snap-confine//mount-namespace-capture-helper
/usr/sbin/named
/usr/sbin/tcpdump
lxc-container-default
lxc-container-default-cgns
lxc-container-default-with-mounting
lxc-container-default-with-nesting
0 profiles are in complain mode.
2 processes have profiles defined.
0 processes are in enforce mode.
0 processes are in complain mode.
2 processes are unconfined but have a profile defined.
/sbin/dient (921)
/usr/sbin/named (6523)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;dynamic-dns-update-with-terraform&quot;&gt;Dynamic DNS Update With Terraform &lt;a class=&quot;direct-link&quot; href=&quot;#dynamic-dns-update-with-terraform&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now we will work in the &lt;code&gt;dns&lt;/code&gt;folder :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- dns
- main.tf
- provider.tf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;provider.tf&lt;/code&gt;, add this :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;provider &amp;amp;quot;dns&amp;amp;quot; {
update {
server = &amp;amp;quot;&amp;amp;quot;
key_name = &amp;amp;quot;&amp;amp;quot;
key_algorithm = &amp;amp;quot;hmac-md5&amp;amp;quot;
key_secret = &amp;amp;quot;&amp;amp;quot;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then from the dns folder launch &lt;code&gt;terraform init&lt;/code&gt;, to grab the dns plugin.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;main.tf&lt;/code&gt; file add Terraform resources :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;resource &amp;amp;quot;dns_a_record_set&amp;amp;quot; &amp;amp;quot;www&amp;amp;quot; {
zone = &amp;amp;quot;toto.int.local.&amp;amp;quot;
name = &amp;amp;quot;www&amp;amp;quot;

addresses = [
&amp;amp;quot;192.168.0.1&amp;amp;quot;,
&amp;amp;quot;192.168.0.2&amp;amp;quot;,
&amp;amp;quot;192.168.0.3&amp;amp;quot;,
]

ttl = 300
}

resource &amp;amp;quot;dns_cname_record&amp;amp;quot; &amp;amp;quot;foo&amp;amp;quot; {
zone = &amp;amp;quot;toto.int.local.&amp;amp;quot;
name = &amp;amp;quot;foo&amp;amp;quot;
cname = &amp;amp;quot;tata.toto.int.local.&amp;amp;quot;
ttl = 300
}

resource &amp;amp;quot;dns_a_record_set&amp;amp;quot; &amp;amp;quot;xxx&amp;amp;quot; {
zone = &amp;amp;quot;toto.int.local.&amp;amp;quot;
name = &amp;amp;quot;tata&amp;amp;quot;
addresses = [&amp;amp;quot;192.168.0.1&amp;amp;quot;]
ttl = 300
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then plan with &lt;code&gt;terraform plan&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
+ create

Terraform will perform the following actions:

+ dns_a_record_set.www
id:
addresses.#: &amp;amp;quot;3&amp;amp;quot;
addresses.1737095236: &amp;amp;quot;192.168.0.3&amp;amp;quot;
addresses.2307365224: &amp;amp;quot;192.168.0.1&amp;amp;quot;
addresses.277792978: &amp;amp;quot;192.168.0.2&amp;amp;quot;
name: &amp;amp;quot;www&amp;amp;quot;
ttl: &amp;amp;quot;300&amp;amp;quot;
zone: &amp;amp;quot;toto.int.local.&amp;amp;quot;

+ dns_a_record_set.xxx
id:
addresses.#: &amp;amp;quot;1&amp;amp;quot;
addresses.2307365224: &amp;amp;quot;192.168.0.1&amp;amp;quot;
name: &amp;amp;quot;tata&amp;amp;quot;
ttl: &amp;amp;quot;300&amp;amp;quot;
zone: &amp;amp;quot;toto.int.local.&amp;amp;quot;

+ dns_cname_record.foo
id:
cname: &amp;amp;quot;tata.toto.int.local.&amp;amp;quot;
name: &amp;amp;quot;foo&amp;amp;quot;
ttl: &amp;amp;quot;300&amp;amp;quot;
zone: &amp;amp;quot;toto.int.local.&amp;amp;quot;

Plan: 3 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn&amp;amp;#039;t specify an &amp;amp;quot;-out&amp;amp;quot; parameter to save this plan, so Terraform
can&amp;amp;#039;t guarantee that exactly these actions will be performed if
&amp;amp;quot;terraform apply&amp;amp;quot; is subsequently run.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can now apply with &lt;code&gt;terraform apply&lt;/code&gt;. Check the dns log with &lt;code&gt;cat /var/log/syslog | grep named&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Jun 15 09:02:24 bind-vm00 named[6523]: client XX.xx.XX.XX#61068/key rndc: updating zone &amp;amp;#039;toto.int.local/IN&amp;amp;#039;: deleting rrset at &amp;amp;#039;www.toto.int.local&amp;amp;#039; A
Jun 15 09:02:24 bind-vm00 named[6523]: zone toto.int.local/IN: sending notifies (serial 2012033123)
Jun 15 09:02:24 bind-vm00 named[6523]: client XX.xx.XX.XX#61066/key rndc: updating zone &amp;amp;#039;toto.int.local/IN&amp;amp;#039;: deleting rrset at &amp;amp;#039;foo.toto.int.local&amp;amp;#039; CNAME
Jun 15 09:02:24 bind-vm00 named[6523]: client XX.xx.XX.XX#61067/key rndc: updating zone &amp;amp;#039;toto.int.local/IN&amp;amp;#039;: deleting rrset at &amp;amp;#039;tata.toto.int.local&amp;amp;#039; A
Jun 15 09:02:29 bind-vm00 named[6523]: zone toto.int.local/IN: sending notifies (serial 2012033125)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;test-your-new-record&quot;&gt;Test your new record &lt;a class=&quot;direct-link&quot; href=&quot;#test-your-new-record&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To validate that the dns have created the new records, you can use your workstation and the &lt;code&gt;nslookup&lt;/code&gt; command (from Windows, Linux or macOs)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nslookup -

&amp;amp;gt; www.toto.int.local
&amp;amp;gt; www.toto.int.local.
Serveur : UnKnown
Address: 51.144.181.124

Nom : www.toto.int.local
Addresses: 192.168.0.2
192.168.0.1
192.168.0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, you can create a DNS Module and create your VM and add them in your new nice Bind9 server.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Git pour les Ops, par un ops le retour</title>
		<link href="/2018/06/28/git-pour-les-ops-par-un-ops-le-retour/"/>
		<updated>2018-06-28T15:43:00+02:00</updated>
		<id>/2018/06/28/git-pour-les-ops-par-un-ops-le-retour/</id>
		<content type="html">&lt;p&gt;Dans le premier article &lt;a href=&quot;https://etienne.deneuve.xyz/2018/06/23/git-pour-ops-par-un-ops/&quot;&gt;git for ops&lt;/a&gt; nous avons appris à :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Créer un repo sur Github ou VSTS&lt;/li&gt;
&lt;li&gt;Configurer une clé ssh pour Git&lt;/li&gt;
&lt;li&gt;Ajouter/Supprimer des fichiers à l&#39;index local&lt;/li&gt;
&lt;li&gt;Commit des fichiers dans l&#39;index local&lt;/li&gt;
&lt;li&gt;Cloner un repo ou ajouter une source distante&lt;/li&gt;
&lt;li&gt;Récupérer le travail existant dans le repo distant&lt;/li&gt;
&lt;li&gt;Envoyer ces commits dans le repository distant&lt;/li&gt;
&lt;li&gt;Créer une branche&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;p&gt;Dans cet article, nous allons aller un peu plus loin et apprendre quelques éléments de git qui sont primordiaux lorsque l&#39;on travaille avec des branches.&lt;/p&gt;
&lt;h2 id=&quot;git-checkout&quot;&gt;Git checkout &lt;a class=&quot;direct-link&quot; href=&quot;#git-checkout&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;La commande git checkout permet de se changer de branche de travail. C&#39;est à dire que si nous faisons la commande &lt;code&gt;git checkout masuperfeature&lt;/code&gt;, les fichiers et les dossiers seront ceux de la branche en question. Faisons donc un petit exercice pour bien comprendre comment cela fonctionne :&lt;/p&gt;
&lt;p&gt;&amp;gt; Vous pouvez créer un repository git local sans server pour cet exercice, c&#39;est que j&#39;ai fais moi même et par conséquent je n&#39;utilise pas les commande &lt;code&gt;git push&lt;/code&gt; et &lt;code&gt;git pull&lt;/code&gt; pour simplifier cet exercice.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# on se place dans la branche master
git checkout master
# on creer un fichier vide :
touch monfichier.txt
# on l&amp;amp;#039;ajoute au &amp;amp;quot;stage&amp;amp;quot; :
git add monfichier.txt
# puis on commit :
git commit -m &amp;amp;quot;mon commit dans master&amp;amp;quot;
# puis on change de branch, le -b permet de créer la branche si elle n&amp;amp;#039;existe pas encore
git checkout -b manouvellebranche
# on valide qu&amp;amp;#039;elle est bien a jour par rapport au serveur
ls
# qui nous retourne :
monfichier.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maintenant, ajoutons un fichier dans cette nouvelle branche :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch monfichier2.txt
git add monfichier2.txt &amp;amp;amp;&amp;amp;amp; git commit -m &amp;amp;quot;mon commit dans manouvellebranche&amp;amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Retournons dans la branche &amp;quot;master&amp;quot; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# on change vers master
git checkout master
# on creer un nouveau fichier :
touch monfichiermaster.txt
git add monfichiermaster.txt &amp;amp;amp;&amp;amp;amp; git commit -m &amp;amp;quot;ajout du fichier dans master&amp;amp;quot;
ls
# nous retourne :
monfichier.txt monfichiermaster.txt
# si nous retournons dans la branche manouvellebranche :
git checkout manouvellebranche
ls
monfichier2.txt monfichier.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Conclusion: les branches permettent d&#39;isoler le travail sans se mélanger entre collègues ou entre features.&lt;/p&gt;
&lt;h2 id=&quot;git-rebase&quot;&gt;Git rebase &lt;a class=&quot;direct-link&quot; href=&quot;#git-rebase&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Il est assez fréquent de travailler sur plusieurs branches en parallèle et qui nous oblige lors de modification importante dans la branche principale de faire &amp;quot;redescendre&amp;quot; les modifications de la branche &amp;quot;master&amp;quot; (ou celle qui a servi de base à la création). Nous allons voir comment récupérer ces modifications dans notre branche &amp;quot;manouvellebranche&amp;quot; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout manouvellebranch
ls
git rebase master
git checkout manouvellebranch
First, rewinding head to replay your work on top of it...
Applying: mon commit dans manouvellebranche
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;git-merge&quot;&gt;Git Merge &lt;a class=&quot;direct-link&quot; href=&quot;#git-merge&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Une fois que notre feature est prête, il peut être intéressant de migrer le travail dans la branche &amp;quot;mère&amp;quot;. Dès lors nous allons pouvoir &amp;quot;merger&amp;quot;, il existe plusieurs façon de merger, soit on merge tout avec l&#39;historique de chaque commit dans la branche &amp;quot;mère&amp;quot;, soit on merge sans l&#39;historique, rassembler dans un seul commit, je préfère cette option afin de ne pas polluer l&#39;historique de la branche de &amp;quot;production&amp;quot; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ajoutons quelques fichiers dans la branche manouvellebranche
touch toto{0..9}{0..9}.txt
git add toto*
git commit -m &amp;amp;quot;adding 100 files&amp;amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite, changeons de branche puis effectuons un merge, simple (le moins bien):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout master
git merge manouvellebranch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et si je me suis trompé ?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# d&amp;amp;#039;abord on vérifie l&amp;amp;#039;id du commit : (-B permets de récupéré 6 lignes de avant le contexte, -A la meme chose mais apres le contexte)
git log | grep -B 6 -A 6 adding

commit 126d0fe758ebb8b7c155d58968063edec996a673
Author: Etienne Deneuve &amp;amp;lt;etienne.deneuve@cellenza.com&amp;amp;gt;
Date: Thu Jun 28 13:07:27 2018 +0200

adding 100 file

commit c9323cb10debb1a0a028f9e7db65a622fb8906a1
Author: Etienne Deneuve &amp;amp;lt;etienne.deneuve@cellenza.com&amp;amp;gt;
Date: Thu Jun 28 12:27:02 2018 +0200

mon commit dans manouvellebranche
# puis on annule notre commit en prenant celui juste avant notre erreur :
git reset c9323cb10debb1a0a028f9e7db65a622fb8906a1
git status
On branch master
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cela tombe, bien nous allons pouvoir faire le deuxième merge (le mieux):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout master
git merge --squash manouvellebranch
git status
On branch master
Changes to be committed:
(use &amp;amp;quot;git reset HEAD ...&amp;amp;quot; to unstage)

new file: toto00.txt

new file: toto99.txt
# dès lors, nous devons commiter:
git commit -m &amp;amp;quot;oui, c&amp;amp;#039;est bon on y va !&amp;amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Documentation as Code</title>
		<link href="/2018/06/26/documentation-as-code/"/>
		<updated>2018-06-26T15:43:44+02:00</updated>
		<id>/2018/06/26/documentation-as-code/</id>
		<content type="html">&lt;h2&gt;Le constat&lt;/h2&gt;
Bien souvent, dans l&#39;Infra as Code, la documentation est assez sommaire, trop manuelle et donc par conséquents obsolète, une heure après l&#39;avoir terminée ( et puis globalement, c&#39;est ch*** non ?).
&lt;!--more--&gt;
&lt;p&gt;Si vous n&#39;avez pas encore lu les articles suivants :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://etienne.deneuve.xyz/2018/06/23/git-pour-ops-par-un-ops/&quot;&gt;&lt;a href=&quot;&quot;&gt;Git for ops&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etienne.deneuve.xyz/2018/06/26/setup-vs-code-bash-git/&quot;&gt;&lt;a href=&quot;&quot;&gt;Mon Setup de VS Code pour Bash et Git&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etienne.deneuve.xyz/2017/10/01/microsoft-experience-17-infrastructure-code-modelisez-et-provisionnez-vos-services-azure-avec-terraform-et-packer/&quot;&gt;&lt;a href=&quot;&quot;&gt;Terraform&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etienne.deneuve.xyz/2017/10/09/vsts-for-ops-1/&quot;&gt;&lt;a href=&quot;&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Je vous invite à le faire, ils sont en quelques sortes des pré-requis, si vous ne connaissez pas encore git, VS Code ou encore Terraform.&lt;/p&gt;
&lt;h2 id=&quot;%22ma%22-solution&quot;&gt;&amp;quot;Ma&amp;quot; solution &lt;a class=&quot;direct-link&quot; href=&quot;#%22ma%22-solution&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;J&#39;utilise des outils comme ansible-docgen ou terraform-docs, ou encore PlatyPS pour générer mes documentations automatiquement, et ce a chaque commit. Ces outils vont parser le code Ansible, Terraform ou Powershell (et il en existe surement pleins d&#39;autres!). Ainsi je suis sûr que ma documentation reflete bien l&#39;etat actuel de mon code, et non pas une version antidaté, mise à jour une fois tout les 6 mois.&lt;/p&gt;
&lt;h3 id=&quot;pr%C3%A9paration&quot;&gt;Préparation &lt;a class=&quot;direct-link&quot; href=&quot;#pr%C3%A9paration&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Comme dans l&#39;article &lt;a href=&quot;https://etienne.deneuve.xyz/2018/06/26/setup-vs-code-bash-git/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Open Source + Windows = VS Code + Bash + Git&lt;/a&gt;, installez les binaires suivants dans votre bash :&lt;/p&gt;
&lt;p&gt;Packages à installer sur le bash Windows :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash

#(obligatoire)installation de git, wget, unzip, python et curl
sudo apt install git wget unzip python curl

# (obligatoire) recuperation du gestionnaire de package &amp;amp;quot;pip&amp;amp;quot;
wget https://bootstrap.pypa.io/get-pip.py

# (optionnel) recuperation de terraform
wget https://releases.hashicorp.com/terraform/0.11.7/terraform_0.11.7_linux_amd64.zip -O terraform.zip

# (obligatoire pour la génération des docs de terraform)
wget https://github.com/segmentio/terraform-docs/releases/download/v0.3.0/terraform-docs_linux_amd64 -O terraform-docs

# (optionnel) extraction de terraform

unzip terraform.zip

# (optionnel) déplacement de terraform dans bin

mv terraform /home/${USER}/.local/bin/

# (obligatoire pour la génération des docs de terraform) déplacement de terraform-docs dans bin

mv terraform-docs /home/${USER}/.local/bin/

# (Obligatoire) installation de pip
python get-pip.py --user

# Correction du path si necessaire pour l&amp;amp;#039;execution de terraform et terraform docs
if [[ &amp;amp;quot;:$PATH:&amp;amp;quot; == *&amp;amp;quot;:$HOME/.local/bin&amp;amp;quot;* ]]; then
echo &amp;amp;quot;Your path is correctly set&amp;amp;quot;
else
PATH=$PATH:/home/${USER}/.local/bin
export PATH
fi

# (obligatoire) upgrade de pip
pip install pip --upgrade --user

# (obligatoire pour ansible) installation de ansible-lint ansible-docgen ansible avec les module azure et pywirm
pip install ansible-lint ansible-docgen ansible[azure] pywinrm --user
# (obligatoire) installation de pre-commit
pip install pre-commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Récupérer le script de génération d&#39;un sommaire dans notre future doc (toujours mieux d&#39;avoir une belle table des matière !):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/ekalinin/github-markdown-toc/master/gh-md-toc -O ./gh-md-toc
mv ./gh-md-toc /home/${USER}/.local/bin
chmod +x /home/${USER}/.local/bin/gh-md-toc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Récupérer le fichier &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; dans ce même article ou sur mon &lt;a href=&quot;https://raw.githubusercontent.com/EtienneDeneuve/vsts-for-ops/master/.pre-commit-config.yaml&quot;&gt;GitHub&lt;/a&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;amp;lt;.&amp;amp;gt;&amp;amp;lt;/.&amp;amp;gt;---
repos:
- repo: https://github.com/pre-commit/pre-commit-hooks
rev: v1.3.0
hooks:
- id: trailing-whitespace
- id: check-yaml
- id: check-xml
- id: check-json
- id: end-of-file-fixer
- id: trailing-whitespace
- id: check-case-conflict
- id: check-merge-conflict
# - id: check-executables-have-shebangs
- id: check-added-large-files
- id: detect-private-key
- id: pretty-format-json
- id: sort-simple-yaml
- repo: https://github.com/willthames/ansible-lint.git
rev: v3.5.0rc1
hooks:
- id: ansible-lint
files: \.(yaml|yml)$
exclude: ./env/
- repo: git://github.com/antonbabenko/pre-commit-terraform
rev: v1.7.3
hooks:
- id: terraform_fmt
- id: terraform_docs
EOF
# puis on l&amp;amp;#039;ajoute à l&amp;amp;#039;index :
git add .pre-commit-config.yaml
git commit -m &amp;amp;quot;adding pre-commit-config&amp;amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puis, lancer l&#39;installation avec &lt;code&gt;pre-commit install&lt;/code&gt;. Ceci nous permet de bien valider nos fichiers avant les commits.&lt;/p&gt;
&lt;h3 id=&quot;g%C3%A9n%C3%A9ration-manuelle-de-la-documentation-pour-ansible&quot;&gt;Génération manuelle de la documentation pour Ansible &lt;a class=&quot;direct-link&quot; href=&quot;#g%C3%A9n%C3%A9ration-manuelle-de-la-documentation-pour-ansible&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Le package &lt;code&gt;ansible-docgen&lt;/code&gt; permets de générer une documentation des rôles et des playbook présents dans le dossier.&lt;/p&gt;
&lt;h3 id=&quot;generation-manuelle-de-la-documentation-pour-terraform&quot;&gt;Generation manuelle de la documentation pour Terraform &lt;a class=&quot;direct-link&quot; href=&quot;#generation-manuelle-de-la-documentation-pour-terraform&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Le package &amp;quot;terraform-docs&amp;quot; permets de générer une documentation des roles et des playbook présents dans le dossier.&lt;/p&gt;
&lt;h3&gt;Automatisation de la doc pour Ansible&lt;/h3&gt;
Voici un script que j&#39;utilises pour générer ma documentation Ansible :
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# je genere la documentation avec ansible-docget pour tout le dossier 
ansible-docgen -p .
# je créer un dossier &amp;amp;quot;docs&amp;amp;quot; dans le projet github
mkdir -p ./docs
# si le dossier contien déjà un fichier fullreadme.md je le déplace 
if [ -d &amp;amp;quot;./docs/fullreadme.md&amp;amp;quot; ]; then
mv ./docs/fullreadme.md ./docs/fullreadme-$(date +&amp;amp;quot;%m_%d_%Y&amp;amp;quot;).old
else
# sinon j&amp;amp;#039;affiche un mesage
echo &amp;amp;quot;full readme doesn&amp;amp;#039;t exists yet&amp;amp;quot;
fi
# j&amp;amp;#039;ajoute le titre à mon document
echo &amp;amp;#039;# Ansible documentation&amp;amp;#039; &amp;amp;gt; ./docs/fullreadme.md
# J&amp;amp;#039;ajoute les placeholders pour injecter la table des matieres
echo &amp;amp;#039;&amp;amp;lt;!--ts--&amp;amp;gt;&amp;amp;#039; &amp;amp;gt;&amp;amp;gt; ./docs/fullreadme.md
echo &amp;amp;#039;&amp;amp;lt;!--te--&amp;amp;gt;&amp;amp;#039; &amp;amp;gt;&amp;amp;gt; ./docs/fullreadme.md
# J&amp;amp;#039;ajoute un titre intermédiaire 
echo &amp;amp;#039;## Roles et Playbook Ansible&amp;amp;#039; &amp;amp;gt;&amp;amp;gt; ./docs/fullreadme.md
# Je créer une section pour les playbooks
echo &amp;amp;#039;### Playbook&amp;amp;#039; &amp;amp;gt;&amp;amp;gt; ./docs/fullreadme.md
# et j&amp;amp;#039;ajoute le contenu du readme.md générer par ansible-docgen (ce sont les playbooks)
# l&amp;amp;#039;expression sed permet de promouvoir les titres sur un niveau plus haut (# vers ##)
cat ./README.md| sed &amp;amp;#039;/^#/s/^/##/&amp;amp;#039; &amp;amp;gt;&amp;amp;gt; ./docs/fullreadme.md
# je créer maintenant la section pour les roles
echo &amp;amp;#039;### Roles&amp;amp;#039; &amp;amp;gt;&amp;amp;gt; ./docs/fullreadme.md
# et j&amp;amp;#039;ajoute le contenu
# l&amp;amp;#039;expression sed permet de promouvoir les titres sur un niveau plus haut (# vers ##)
cat ./roles/README.md| sed &amp;amp;#039;/^#/s/^/##/&amp;amp;#039; &amp;amp;gt;&amp;amp;gt; ./docs/fullreadme.md
# Je génère la table des matières et je l&amp;amp;#039;injecte 
gh-md-toc --insert ./docs/fullreadme.md
# je pousse mon fullreadme.md vers readme.md pour qu&amp;amp;#039;il soit afficher par defaut dans GitHub ou vsts
cp ./docs/fullreadme.md ./README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Automatisation de la doc pour Terraform&lt;/h3&gt;
&lt;span style=&quot;display: inline !important; float: none; background-color: transparent; color: #555555; cursor: text; font-family: &#39;Lato&#39;,&#39;Helvetica Neue&#39;,Arial,sans-serif; font-size: 18px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; orphans: 2; text-align: left; text-decoration: none; text-indent: 0px; text-transform: none; -webkit-text-stroke-width: 0px; white-space: normal; word-spacing: 0px;&quot;&gt;Voici un script que j&#39;utilises pour générer ma documentation Terraform:&lt;/span&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# conservation de l&amp;amp;#039;ancien readme (backup)
mv ./README.md ./README.old
# recherche de tout les repertoires et execution de terraform-docs dans chacun d&amp;amp;#039;eux
find . -type d -exec bash -c &amp;amp;#039;terraform-docs md &amp;amp;quot;{}&amp;amp;quot; &amp;amp;gt; &amp;amp;quot;{}&amp;amp;quot;/README.md;&amp;amp;#039; \;
# recherche de tout les readme.md vide et suppression
find . -name &amp;amp;quot;README.md&amp;amp;quot; -size 1c -type f -delete
# creation du titre du document
echo &amp;amp;#039;# Terraform Modules Documentation&amp;amp;#039; &amp;amp;gt; modules.md
# ajout des placeholder pour la generation de la tables des matières
echo &amp;amp;#039;&amp;amp;lt;!--ts--&amp;amp;gt;&amp;amp;#039; &amp;amp;gt;&amp;amp;gt; modules.md
echo &amp;amp;#039;&amp;amp;lt;!--te--&amp;amp;gt;&amp;amp;#039; &amp;amp;gt;&amp;amp;gt; modules.md
# boucle sur tout les readme.md present
for f in $(find ./ -name &amp;amp;#039;README.md&amp;amp;#039;)
do
# ajout du nom du fichier pour la table des matieres
echo &amp;amp;quot;## $f&amp;amp;quot; &amp;amp;gt;&amp;amp;gt; modules.md
# ajout du contenu du fichier avec une expression sed pour ajouter un niveau dans l&amp;amp;#039;arboresence
cat $f | sed &amp;amp;#039;/^#/s/^/#/&amp;amp;#039; &amp;amp;gt;&amp;amp;gt; modules.md
done
# insertion de la table des matières
gh-md-toc --insert modules.md
# copie du fichier modules.md temporaire vers README.md pour un affichage directe sur GitHub et VSTS
cp ./modules.md ./README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Ajout de ces scripts dans Git&lt;/h2&gt;
Afin de transformer ces scripts en &quot;hooks&quot; il suffit de les placer dans le repertoire caché .git/hooks.
&lt;p&gt;Dans mon autre article Open Source + Windows = VS Code + Bash + Git, nous avons utiliser les pré-commit hooks, cette fois-ci nous allons utiliser le post-commit&lt;/p&gt;
&lt;p&gt;Ajoutez un fichier post-commit (executable) ajoutez le contenu suivant :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
#!/bin/bash

&amp;amp;quot;$(dirname $0)/generate_docs.sh&amp;amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;puis créer un fichier &amp;quot;generate_docs.sh&amp;quot; avec comme contenu le script, de votre choix (Terraform ou Ansible).&lt;/p&gt;
&lt;p&gt;Voila, maintenant à chaque commit réussi, la doc de votre projet sera mise à jour.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Open Source + Windows = Vs Code + Bash + Git
</title>
		<link href="/2018/06/26/setup-vs-code-bash-git/"/>
		<updated>2018-06-26T15:03:40+02:00</updated>
		<id>/2018/06/26/setup-vs-code-bash-git/</id>
		<content type="html">&lt;p&gt;Dans cet article, je vous expose mon setup pour Terraform et Ansible, avec git depuis un poste Windows 10.&lt;/p&gt;
&lt;!--more--&gt;Si vous ne connaissez pas encore Git, je vous invite à lire mes articles à ce sujet :
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://etienne.deneuve.xyz/2018/06/23/git-pour-ops-par-un-ops/&quot;&gt;Git for ops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etienne.deneuve.xyz/2018/06/28/git-pour-les-ops-par-un-ops-le-retour/&quot;&gt;Git for ops, le retour&lt;/a&gt;&lt;br&gt;
Si c&#39;est Visual Studio Code c&#39;est par &lt;a href=&quot;https://etienne.deneuve.xyz/2017/01/26/visual-studio-code-pour-ansible-terraform/&quot;&gt;ici&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Et sinon, pour aller plus loin, lisez mon article sur &lt;a href=&quot;https://etienne.deneuve.xyz/2018/06/26/documentation-as-code/&quot;&gt;Documentation as Code&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code &lt;a class=&quot;direct-link&quot; href=&quot;#visual-studio-code&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Créer un nouveau workspace :&lt;/p&gt;
&lt;p&gt;Ouvrez un dossier git ou un vide puis sauvegarder le workspace via &amp;quot;File --&amp;gt; Save workspace as&amp;quot;&lt;/p&gt;
&lt;p&gt;Dans la configuration du workspace Crtl + P : &amp;quot; &amp;gt; Open Workspace Settings&amp;quot;  et ajoutez :&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;settings&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;terminal.integrated.shell.windows&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &amp;amp;quot;c&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;\\windows\\System&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;\\bash.exe&amp;amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et relancez VS Code ;)&lt;/p&gt;
&lt;h2&gt;Configuration de Bash&lt;/h2&gt;
Il existe pleins de tuto pour installer Bash sur Windows, je ne reviens pas là-dessus, mais voici tout de même un liens vers le store pour un &lt;a href=&quot;https://www.microsoft.com/store/productId/9NBLGGH4MSV6&quot;&gt;Ubuntu &lt;/a&gt;
&lt;p&gt;Je vous donne un petit script bash pour installer les différents packages que j&#39;utilise pour Bash, vous pouvez également installer &lt;a href=&quot;https://github.com/Bash-it/bash-it&quot;&gt;bash-it&lt;/a&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
echo &amp;amp;quot;installation des packages de puis les depots ubuntu&amp;amp;quot;
sudo apt install git wget unzip python curl python-dev build-essential -q -y
echo &amp;amp;quot;Téléchargement de pip&amp;amp;quot;
wget https://bootstrap.pypa.io/get-pip.py
echo &amp;amp;quot;Téléchargement de Terraform&amp;amp;quot;
wget https://releases.hashicorp.com/terraform/0.11.7/terraform_0.11.7_linux_amd64.zip -O terraform.zip
echo &amp;amp;quot;Téléchargement de Terraform Docs&amp;amp;quot;
wget https://github.com/segmentio/terraform-docs/releases/download/v0.3.0/terraform-docs_linux_amd64 -O terraform-docs
echo &amp;amp;quot;Ajout de Terraform et Terraform-docs dans /home/${USER}/.local/bin/&amp;amp;quot;
unzip terraform.zip
mv terraform /home/${USER}/.local/bin/
mv terraform-docs /home/${USER}/.local/bin/
echo &amp;amp;quot;installation de pip en mode user&amp;amp;quot;
python get-pip.py --user
echo &amp;amp;quot;verification du path&amp;amp;quot;
if [[ &amp;amp;quot;:$PATH:&amp;amp;quot; == *&amp;amp;quot;:$HOME/.local/bin&amp;amp;quot;* ]]; then
echo &amp;amp;quot;Your path is correctly set&amp;amp;quot;
else
echo &amp;amp;quot;Ajout de /home/${USER}/.local/bin dans le path&amp;amp;quot;
PATH=$PATH:/home/${USER}/.local/bin
export PATH
fi
echo &amp;amp;quot;Mise a jour de pip par pip&amp;amp;quot;
pip install pip --upgrade --user
echo &amp;amp;quot;installation des outils pour ansible&amp;amp;quot;
pip install ansible-lint ansible-docgen pre-commit ansible[azure] pywinrm molecule --user
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;configuration-de-pre-commit&quot;&gt;Configuration de Pre-Commit &lt;a class=&quot;direct-link&quot; href=&quot;#configuration-de-pre-commit&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pre-commit permet d&#39;exécuter des petits tests sur le code lors du commit dans un hooks &amp;quot;pre-commit&amp;quot;.&lt;/p&gt;
&lt;p&gt;Dans le repo Git, ajoutez un fichier .pre-commit-config.yaml, c&#39;est lui qui indiquera à pre-commit ce qu&#39;il doit configurer dans git (.git/hooks) :&lt;/p&gt;
&lt;p&gt;Wordpress ne conservant pas bien les espaces je vous invite a récupérer une version sur mon GitHub &lt;a href=&quot;https://raw.githubusercontent.com/EtienneDeneuve/vsts-for-ops/master/.pre-commit-config.yaml&quot;&gt;ici&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;amp;lt;./.pre-commit-config.yaml
---
repos:
- repo: https://github.com/pre-commit/pre-commit-hooks
rev: v1.3.0
hooks:
- id: check-yaml
- id: check-xml
- id: check-json
- id: end-of-file-fixer
- id: check-case-conflict
- id: check-merge-conflict
#- id: check-executables-have-shebangs
- id: check-added-large-files
- id: trailing-whitespace
- id: detect-private-key
- id: pretty-format-json
- id: sort-simple-yaml
- repo: https://github.com/willthames/ansible-lint.git
rev: v3.5.0rc1
hooks:
- id: ansible-lint
files: \.(yaml|yml)$
exclude: ./env/
- repo: git://github.com/antonbabenko/pre-commit-terraform
rev: v1.7.3
hooks:
- id: terraform_fmt
- id: terraform_docs
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puis on l&#39;ajoute à l&#39;index :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .pre-commit-config.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On commit :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit . -m &amp;amp;quot;validation des pré commit hooks&amp;amp;quot; -n
git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En suite, on valide l&#39;installation des éléments voulu avec :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pre-commit install
pre-commit installed at /mnt/c/Users/etien/Documents/it/blog/.git/hooks/pre-commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;et on run sur les fichiers existant :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2018-06-23 10:03:04 ⌚ etienne in /mnt/c/Users/etien/Documents/it/blog
± | master S:7 U:1 ✗| → pre-commit run --all-files
Check Yaml...............................................................Passed
Check Xml............................................(no files to check)Skipped
Check JSON...........................................(no files to check)Skipped
Fix End of Files.........................................................Passed
Check for case conflicts.................................................Passed
Check for merge conflicts................................................Passed
Check for added large files..............................................Passed
Trim Trailing Whitespace.................................................Passed
Detect Private Key.......................................................Passed
Pretty format JSON...................................(no files to check)Skipped
Sort simple YAML files...............................(no files to check)Skipped
Ansible-lint.............................................................Passed
Terraform fmt............................................................Passed
Terraform docs...........................................................Passed
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;test-avec-git&quot;&gt;Test avec git &lt;a class=&quot;direct-link&quot; href=&quot;#test-avec-git&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ajoutez un fichier à l&#39;index avec &lt;code&gt;git add fichier.yml&lt;/code&gt; avec ce contenu :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
- name: Check Installed Updates
win_updates:
category_names:
- SecurityUpdates
- CriticalUpdates
- UpdateRollups
state: searched
log_path: c:\ansible_wu1.txt
register: search_updates
tags:
- updates
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;J&#39;ai volontairement ajouté des espaces qui ne sont peut-être pas visible avec Wordpress, dans ce cas utiliser un playbook ansible &lt;a href=&quot;https://raw.githubusercontent.com/EtienneDeneuve/Azure/master/Ansible/inventory/init.yml&quot;&gt;ici&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Et tentez de faire un commit :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit .
Check Yaml...............................................................Passed
Check Xml............................................(no files to check)Skipped
Check JSON...........................................(no files to check)Skipped
Fix End of Files.........................................................Passed
Check for case conflicts.................................................Passed
Check for merge conflicts................................................Passed
Check for added large files..............................................Passed
Trim Trailing Whitespace.................................................Failed
hookid: trailing-whitespace

Files were modified by this hook. Additional output:

Fixing test.yml

Detect Private Key.......................................................Passed
Pretty format JSON...................................(no files to check)Skipped
Sort simple YAML files...............................(no files to check)Skipped
Ansible-lint.............................................................Passed
Terraform fmt........................................(no files to check)Skipped
Terraform docs.......................................(no files to check)Skipped
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le hook de pre-commit trim trailing whitespace a nettoyer les espaces en trop dans votre fichier. Il vous faudra donc ajouter à nouveau le fichier de test à l&#39;index avec un &lt;code&gt;git add test.yml&lt;/code&gt;, puis faite un nouveau commit :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add test.yml
git commit . -m &amp;amp;quot;Test&amp;amp;quot;
Check Yaml...............................................................Passed
Check Xml............................................(no files to check)Skipped
Check JSON...........................................(no files to check)Skipped
Fix End of Files.........................................................Passed
Check for case conflicts.................................................Passed
Check for merge conflicts................................................Passed
Check for added large files..............................................Passed
Trim Trailing Whitespace.................................................Passed
Detect Private Key.......................................................Passed
Pretty format JSON...................................(no files to check)Skipped
Sort simple YAML files...............................(no files to check)Skipped
Ansible-lint.............................................................Passed
Terraform fmt........................................(no files to check)Skipped
Terraform docs.......................................(no files to check)Skipped
[master 8a6cf31] Adding test.yml
1 files changed, 10 insertions(+), 0 deletions(-)
create mode 100644 test.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voila, maintenant vous savez comment installer des hooks de pre-commit pour faire une pré-validation.&lt;/p&gt;
&lt;p&gt;Pour aller un peu plus loin, je vous invite à lire mon article sur la gestion automatique de la documentation avec Terraform-Docs et Ansible-Docgen.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Git pour Ops, par un Ops</title>
		<link href="/2018/06/23/git-pour-ops-par-un-ops/"/>
		<updated>2018-06-23T21:57:39+02:00</updated>
		<id>/2018/06/23/git-pour-ops-par-un-ops/</id>
		<content type="html">&lt;p&gt;Git est un logiciel de contrôle de code source déjà très utilisé dans le monde des dev. Lorsque l&#39;on fait de l&#39;Infra as Code, nous pouvons aussi utiliser git, je pense même que cela va devenir une vraie nécessité. Pour nous les Ops, ce n&#39;est pas nécessairement naturel et j&#39;ai donc décidé de démystifier git dans un contexte Cloud comme Azure.&lt;/p&gt;
&lt;p&gt;Afin de suivre ce billet, vous devez installer quelques outils sur votre poste de travail afin de pouvoir tester par vous-même.&lt;/p&gt;
&lt;p&gt;Je vous invite également à lire ces articles :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://etienne.deneuve.xyz/2018/06/28/git-pour-les-ops-par-un-ops-le-retour/&quot;&gt;Git for ops, le retour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etienne.deneuve.xyz/2018/06/26/setup-vs-code-bash-git/&quot;&gt;Mon Setup de VS Code pour Bash et Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etienne.deneuve.xyz/2017/10/01/microsoft-experience-17-infrastructure-code-modelisez-et-provisionnez-vos-services-azure-avec-terraform-et-packer&quot;&gt;Terraform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etienne.deneuve.xyz/2017/10/09/vsts-for-ops-1/&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sur-le-poste-de-travail&quot;&gt;Sur le poste de travail &lt;a class=&quot;direct-link&quot; href=&quot;#sur-le-poste-de-travail&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sur un poste Windows vous devez installer à minima :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio Code&lt;/li&gt;
&lt;li&gt;Git-SCM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vous pouvez utiliser chocolatey :&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/EtienneDeneuve/5738b4f0aacac785c2a7f982f0346f5d.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Sur macOs :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio Code&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;un-serveur-git&quot;&gt;Un serveur Git &lt;a class=&quot;direct-link&quot; href=&quot;#un-serveur-git&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Vous pouvez utiliser &lt;a href=&quot;https://go.microsoft.com/fwlink/?LinkId=307137&quot;&gt;VSTS&lt;/a&gt; ou &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;repo-sur-github&quot;&gt;Repo sur GitHub &lt;a class=&quot;direct-link&quot; href=&quot;#repo-sur-github&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Une fois votre compte actif, créez un repository Git via le bouton vert &amp;quot;Create Repository&amp;quot;&lt;/p&gt;
&lt;h3 id=&quot;repo-sur-vsts&quot;&gt;Repo sur Vsts &lt;a class=&quot;direct-link&quot; href=&quot;#repo-sur-vsts&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;J&#39;ai déjà publié un article concernant vsts&lt;a href=&quot;https://etienne.deneuve.xyz/2017/10/09/vsts-for-ops-1/&quot;&gt; ici&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;git-en-ssh&quot;&gt;Git en SSH &lt;a class=&quot;direct-link&quot; href=&quot;#git-en-ssh&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Afin d&#39;avoir accès à VSTS ou à GitHub depuis un bash Windows ou Linux, il faut générer une clé SSH :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Je vous recommande vivement l&#39;utilisation de bash pour git et la suite de cet article. Si vous n&#39;avez pas encore installer bash sur votre Windows, installer le puis suivez cet article : &lt;a href=&quot;https://etienne.deneuve.xyz/2018/06/26/setup-vs-code-bash-git/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Open Source + Windows = Vs Code + Bash + Git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p ~/.ssh
ssh-keygen -f ~/.ssh/vsts
cat vsts.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ouvrez VSTS ou Git puis :&lt;/p&gt;
&lt;p&gt;VSTS : https://&amp;lt;votreurl&amp;gt;/_details/security/keys)&amp;lt;/votreurl&amp;gt;Git : &lt;a href=&quot;https://github.com/settings/keys&quot;&gt;https://github.com/settings/keys&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cliquez sur &amp;quot;Add&amp;quot; et collez la clé publique.&lt;/p&gt;
&lt;p&gt;Ensuite ajoutez la clé dans l&#39;agent ssh :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-agent bash
ssh-add ~/.ssh/vsts
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;where-to-start-%3F&quot;&gt;Where to start ? &lt;a class=&quot;direct-link&quot; href=&quot;#where-to-start-%3F&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Lorsqu&#39;on commence à travailler avec git, il est possible d&#39;utiliser deux méthodes, soit on clone le repo distant, soit on ajoute le repo distant comme source.&lt;/p&gt;
&lt;h2 id=&quot;clone-ou-remote-%3F&quot;&gt;Clone ou Remote ? &lt;a class=&quot;direct-link&quot; href=&quot;#clone-ou-remote-%3F&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pour faire un clone ou ajouter un repository distant, il suffit de récupérer l&#39;url disponible dans l&#39;interface de GitHub ou de VSTS puis avec cette url :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clone&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git clone https://xxxx/git.git
# ou avec la belle cle ssh :
git clone ssh://
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;gt; Le clone est utilisable lorsque notre projet est vide, ou qu&#39;il n&#39;est pas encore present dans la machine de travail (reinstallation, pc fixe de la maison...)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remote&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cette méthode est plus complexe et pas forcément nécessaire, il est juste intéressant de la connaitre.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin url
git commit . -m &amp;quot;inital commit&amp;quot;
git push origin master
git add --all
git commit . -m &amp;quot;add exisiting file in the remote repo&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Le remote est utilisable si le projet est déjà sur la machine et que le repository distant n&#39;existe pas encore.&lt;br&gt;
Je vous conseille de bien faire un premier commit &amp;quot;vide&amp;quot; puis d&#39;ajouter les fichiers (git add --all) puis à nouveau d&#39;envoyer les fichiers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ajouter%2Fsupprimer-des-fichiers-%C3%A0-l&#39;index&quot;&gt;Ajouter/Supprimer des fichiers à l&#39;index &lt;a class=&quot;direct-link&quot; href=&quot;#ajouter%2Fsupprimer-des-fichiers-%C3%A0-l&#39;index&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Avec Git, quand on créer un nouveau fichier, par défaut il n&#39;est pas forcément ajouté à l&#39;index, c&#39;est à dire qu&#39;il ne sera pas envoyé au server lors d&#39;un &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ajout de fichiers&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git add ./monchemin/monfichier
# ou un dossier complet :
git add ./mondossier/
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Attention, git ne prendra jamais un dossier vide, il ne le prendra que si un fichier meme vide est present.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Suppression de fichiers&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Je ne suis pas responsable de vos fichiers perdus ;)&lt;/em&gt;&lt;br&gt;
Lorsqu&#39;on supprime un fichier du repertoire local, il n&#39;est pas supprimé de l&#39;index de git sans faire la commande :&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;git rm ./monchemin/monfichier --cached
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;commit&quot;&gt;Commit &lt;a class=&quot;direct-link&quot; href=&quot;#commit&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Afin d&#39;ajouter nos fichier dans l&#39;index en attente, il est nécessaire de valider ces fichiers, un peu comme en base de données Commit, Execute, Rollback, en cas de soucis.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit -m &amp;amp;quot;le message du commit en fonction de votre travail... (pensez à vos collègues !&amp;amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;pull-ou-fetch-%3F&quot;&gt;Pull ou Fetch ? &lt;a class=&quot;direct-link&quot; href=&quot;#pull-ou-fetch-%3F&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Avant de valider ce &lt;code&gt;commit&lt;/code&gt; sur le server, il est important de vérifier si on est bien raccord avec le canal &amp;quot;upstream&amp;quot;, c&#39;est à dire le serveur distant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pull&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Git pull en réalité, c&#39;est un &lt;code&gt;git fetch&lt;/code&gt; puis un &lt;code&gt;git merge FETCH_HEAD&lt;/code&gt;, pour gagner du temps.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Fetch&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git fetch
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Git fetch permet de récupérer les commits distants qui on eu lieu de puis le dernier &lt;code&gt;fetch&lt;/code&gt;. En effet, sans faire de &lt;code&gt;pull&lt;/code&gt; ou de &lt;code&gt;fetch&lt;/code&gt;, le server distant et local on des versions différentes des index (et donc des fichiers).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;git-push&quot;&gt;Git push &lt;a class=&quot;direct-link&quot; href=&quot;#git-push&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Afin de partager votre travail avec vos collègues, vous devez envoyer vos modifications sur le server (si, si, si).&lt;br&gt;
Il y a plusieurs façons de travailler avec git, mais lorsqu&#39;on est dans une branche de travail (et pas de prod!) nous pouvons faire un push :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;git-branch&quot;&gt;Git branch &lt;a class=&quot;direct-link&quot; href=&quot;#git-branch&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Avec git, l&#39;idéal c&#39;est de créer des branches pour le travail et pour la production.&lt;br&gt;
J&#39;ai beaucoup aimer la façon de gérer les branches que j&#39;ai utilisé avec &lt;a href=&quot;https://www.linkedin.com/in/yannick-neff-7754aa8/&quot;&gt;Yannick Neff&lt;/a&gt; et &lt;a href=&quot;https://www.linkedin.com/in/maxencemaireaux/&quot;&gt;Maxence Maireaux&lt;/a&gt; sur l&#39;&lt;a href=&quot;github.com/societe-general/os-factory&quot;&gt;Os Factory Open Source by Société Générale&lt;/a&gt;.&lt;br&gt;
En gros, on part du postulat qu&#39;il y aura plusieurs versions du produit et donc dès le départ, on créer une branche v0 pour la version initial et on n&#39;utilise pas la branch master (du tout). la v0 sera la version initiale de production du produit, en suite on créer des branches par feature request.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;la premiere branche :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b v0
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;puis les autres :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;# support d&amp;amp;#039;aws
git checkout -b v0-aws
# support d&amp;amp;#039;azure
git checkout -b v0-azure

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voilà, vous savez maintenant utiliser les bases de git, je vous invite à poursuivre avec &lt;a href=&quot;https://etienne.deneuve.xyz/2018/06/26/setup-vs-code-bash-git/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Open Source + Windows = VS Code + Bash + Git&lt;/a&gt;.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Terraform: Providers à connaître, DataSource à redécouvrir !</title>
		<link href="/2018/04/06/terraform-providers-datasource/"/>
		<updated>2018-04-06T18:30:52+02:00</updated>
		<id>/2018/04/06/terraform-providers-datasource/</id>
		<content type="html">&lt;h1 id=&quot;terraform&quot;&gt;Terraform &lt;a class=&quot;direct-link&quot; href=&quot;#terraform&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;avant-de-%22coder%22&quot;&gt;Avant de &amp;quot;coder&amp;quot; &lt;a class=&quot;direct-link&quot; href=&quot;#avant-de-%22coder%22&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Je ne vous présente pas à nouveau Terraform, je l&#39;ai déjà fait &lt;a href=&quot;https://etienne.deneuve.xyz/2017/10/01/microsoft-experience-17-infrastructure-code-modelisez-et-provisionnez-vos-services-azure-avec-terraform-et-packer/&quot;&gt;ici&lt;/a&gt;, &lt;a href=&quot;https://stanislas.io/2017/01/24/infrastructure-dans-azure-c-est-comme-du-lego-slides-et-ressources-utiles/&quot;&gt;ici&lt;/a&gt; ou sinon sur mon &lt;a href=&quot;https://github.com/etiennedeneuve/Azure/tree/master/Terraform&quot;&gt;github&lt;/a&gt;. Je vous invite également à regarder la &lt;a href=&quot;https://stanislas.io/2017/09/18/video-infrastructure-as-code-dans-azure-avec-terraform/&quot;&gt;vidéo&lt;/a&gt; de Stanislas Quastana.&lt;br&gt;
Si vous êtes des partenaires Microsoft, vous pouvez (devez) suivre les webinars &lt;a href=&quot;http://aka.ms/azure-lab&quot;&gt;Azure Lab Experiences&lt;/a&gt; de &lt;a href=&quot;https://www.linkedin.com/in/oseborn/&quot;&gt;Mickael Debois&lt;/a&gt; et de &lt;a href=&quot;https://www.linkedin.com/in/florent-chambon/&quot;&gt;Florent Chambon&lt;/a&gt;.&lt;br&gt;
L&#39;objet de cet article est de vous montrer quelques points intéressants qu&#39;il est bon de connaître !&lt;/p&gt;
&lt;h2 id=&quot;providers&quot;&gt;Providers &lt;a class=&quot;direct-link&quot; href=&quot;#providers&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Terraform repose sur des providers que nous pouvons déclarer tel que :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;provider &amp;amp;quot;nomduprovider&amp;amp;quot; {

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;J&#39;en ai trouvé qui sont plutôt sympas  fournis par Hashicorp:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/providers/random/index.html&quot;&gt;Random&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/providers/template/index.html&quot;&gt;Template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ou encore ceux de la communauté que je ne détaillerai pas, mais à  noter la présence d&#39;un provider Active Directory, Google Calendar, Let&#39;s encrypt... la liste complète &lt;a href=&quot;https://www.terraform.io/docs/providers/type/community-index.html&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;random&quot;&gt;Random &lt;a class=&quot;direct-link&quot; href=&quot;#random&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Voici un exemple pour le provider random :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;provider &amp;amp;quot;random&amp;amp;quot; {}

resource &amp;amp;quot;random_pet&amp;amp;quot; &amp;amp;quot;demo_pet&amp;amp;quot; {
prefix = &amp;amp;quot;myad&amp;amp;quot;
separator = &amp;amp;quot;.&amp;amp;quot;
}

resource &amp;amp;quot;random_id&amp;amp;quot; &amp;amp;quot;demo_id&amp;amp;quot; {
prefix = &amp;amp;quot;web&amp;amp;quot;
byte_length = 8
}

output &amp;amp;quot;demo&amp;amp;quot; {
value = &amp;amp;quot;${random_pet.demo_pet.id}&amp;amp;quot;
}

output &amp;amp;quot;demo-id&amp;amp;quot; {
value = &amp;amp;quot;${random_id.demo_id.dec}&amp;amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recopiez cet exemple puis exécutez la commande &lt;code&gt;terraform init&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS C:\Users\etien\Documents\it\blog&amp;amp;gt; terraform init

Initializing provider plugins...
- Checking for available provider plugins on https://releases.hashicorp.com...
- Downloading plugin for provider &amp;quot;random&amp;quot; (1.2.0)...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = &amp;quot;...&amp;quot; constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.random: version = &amp;quot;~&amp;amp;gt; 1.2&amp;quot;

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running &amp;quot;terraform plan&amp;quot; to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Une fois que l&#39;init est fait, nous sommes prêts ! lancez donc &lt;code&gt;terraform apply&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS C:\Users\etien\Documents\it\blog&amp;amp;gt; terraform apply

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
+ create

Terraform will perform the following actions:

+ random_id.demo_id
id:
b64:
b64_std:
b64_url:
byte_length: &amp;amp;quot;8&amp;amp;quot;
dec:
hex:
prefix: &amp;amp;quot;web&amp;amp;quot;

+ random_pet.demo_pet
id:
length: &amp;amp;quot;2&amp;amp;quot;
prefix: &amp;amp;quot;myad&amp;amp;quot;
separator: &amp;amp;quot;.&amp;amp;quot;

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
Terraform will perform the actions described above.
Only &amp;amp;#039;yes&amp;amp;#039; will be accepted to approve.

Enter a value: yes

random_pet.demo_pet: Creating...
length: &amp;amp;quot;&amp;amp;quot; =&amp;amp;gt; &amp;amp;quot;2&amp;amp;quot;
prefix: &amp;amp;quot;&amp;amp;quot; =&amp;amp;gt; &amp;amp;quot;myad&amp;amp;quot;
separator: &amp;amp;quot;&amp;amp;quot; =&amp;amp;gt; &amp;amp;quot;.&amp;amp;quot;
random_id.demo_id: Creating...
b64: &amp;amp;quot;&amp;amp;quot; =&amp;amp;gt; &amp;amp;quot;&amp;amp;quot;
b64_std: &amp;amp;quot;&amp;amp;quot; =&amp;amp;gt; &amp;amp;quot;&amp;amp;quot;
b64_url: &amp;amp;quot;&amp;amp;quot; =&amp;amp;gt; &amp;amp;quot;&amp;amp;quot;
byte_length: &amp;amp;quot;&amp;amp;quot; =&amp;amp;gt; &amp;amp;quot;8&amp;amp;quot;
dec: &amp;amp;quot;&amp;amp;quot; =&amp;amp;gt; &amp;amp;quot;&amp;amp;quot;
hex: &amp;amp;quot;&amp;amp;quot; =&amp;amp;gt; &amp;amp;quot;&amp;amp;quot;
prefix: &amp;amp;quot;&amp;amp;quot; =&amp;amp;gt; &amp;amp;quot;web&amp;amp;quot;
random_pet.demo_pet: Creation complete after 0s (ID: myad.quiet.filly)
random_id.demo_id: Creation complete after 0s (ID: aZLeiFCrOno)

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

demo = myad.quiet.filly
demo-id = web7607387397632506490
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voilà, grâce à ce provider, plus besoin de chercher des noms pour vos tests et vos déploiments de cattle !&lt;/p&gt;
&lt;h3 id=&quot;template&quot;&gt;Template &lt;a class=&quot;direct-link&quot; href=&quot;#template&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pour le provider template, reprenez votre fichier et ajoutez les éléments suivants :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;provider &amp;amp;quot;random&amp;amp;quot; {}

resource &amp;amp;quot;random_pet&amp;amp;quot; &amp;amp;quot;demo_pet&amp;amp;quot; {
prefix = &amp;amp;quot;myad&amp;amp;quot;
separator = &amp;amp;quot;.&amp;amp;quot;
}

resource &amp;amp;quot;random_id&amp;amp;quot; &amp;amp;quot;demo_id&amp;amp;quot; {
prefix = &amp;amp;quot;web&amp;amp;quot;
byte_length = 4
}

output &amp;amp;quot;demo&amp;amp;quot; {
value = &amp;amp;quot;${random_pet.demo_pet.id}&amp;amp;quot;
}

output &amp;amp;quot;demo-id&amp;amp;quot; {
value = &amp;amp;quot;${random_id.demo_id.dec}&amp;amp;quot;
}

provider &amp;amp;quot;template&amp;amp;quot; {}

data &amp;amp;quot;template_file&amp;amp;quot; &amp;amp;quot;demo&amp;amp;quot; {
template = &amp;amp;lt;&amp;amp;lt;-EOF #/bin/shell hostname $${hostname} EOF vars { hostname = &amp;amp;quot;${random_pet.demo_pet.id}&amp;amp;quot; } } output &amp;amp;quot;demo-template&amp;amp;quot; { value = &amp;amp;quot;${data.template_file.demo.*.rendered}&amp;amp;quot; } ``` puis faites votre init, comme nous avons un nouveau provider, puis votre apply : ``` PS C:\Users\etien\Documents\it\blog&amp;amp;gt; terraform apply
random_pet.demo_pet: Refreshing state... (ID: myad.quiet.filly)
random_id.demo_id: Refreshing state... (ID: ksLYNA)
data.template_file.demo: Refreshing state...

Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

Outputs:

demo = myad.quiet.filly
demo-id = web2462242868
demo-template = [
#/bin/shell

hostname myad.quiet.filly

]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ce provider est assez pratique pour générer des user_data ou des scripts customisés à chaque lancement en fonction des variables du contexte.&lt;/p&gt;
&lt;h2 id=&quot;datasources&quot;&gt;DataSources &lt;a class=&quot;direct-link&quot; href=&quot;#datasources&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Comme nous venons de le voir, à moins d&#39;avoir fait un copier coller sans lire le code, dans Terraform nous avions plusieurs type dont &amp;quot;provider&amp;quot;, &amp;quot;resource&amp;quot; ou encore &amp;quot;output&amp;quot; et &amp;quot;variable&amp;quot;, mais aussi &amp;quot;data&amp;quot;. Ce type est assez intéressant puisqu&#39;il permet d&#39;interroger dynamiquement le provider.&lt;br&gt;
Admettons, vous avez une belle infra réseau dans Azure et vous souhaitez ajouter une belle machine dans ce beau réseau, avant ce n&#39;était pas super pratique, il fallait jouer avec les imports, au risque de supprimer le vnet (par erreur, un vendredi soir vers 17h, au hazard) lors de l&#39;invocation de la meilleure commande de terraform (destroy).&lt;/p&gt;
&lt;p&gt;Voici un petit exemple de l&#39;utilisation de ces datasources :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;provider &amp;quot;azurerm&amp;quot; {

}

data &amp;quot;azurerm_virtual_network&amp;quot; &amp;quot;test&amp;quot; {
name = &amp;quot;production&amp;quot;
resource_group_name = &amp;quot;networking&amp;quot;
}

output &amp;quot;virtual_network_id&amp;quot; {
value = &amp;quot;${data.azurerm_virtual_network.test.id}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;gt; Vous noterez surement que mon provider azurerm est vide, non je n&#39;ai pas effacé mes infos, mais je vais vous donner deux solutions pour ne pas les oublier avant de faire un commit sur un github public avec votre SPN en clair pour tous.&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; - Solution 1 :&lt;br&gt;
&amp;gt; Installez Azure Cli 2.0&lt;br&gt;
&amp;gt; - Solution 2 :&lt;br&gt;
&amp;gt; Ajouter a vos variables d&#39;environnement les elements :&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; * ARM_SUBSCRIPTION_ID,&lt;br&gt;
&amp;gt; * ARM_CLIENT_ID,&lt;br&gt;
&amp;gt; * ARM_CLIENT_SECRET,&lt;br&gt;
&amp;gt; * ARM_TENANT_ID&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt;Si vous utilisez Powershell, n&#39;oubliez pas que vous pouvez les créer de cette façon :&lt;br&gt;
&amp;gt;&lt;code&gt;&amp;amp;gt;Set-Item env:\ARM_SUBSCRIPTION_ID -Value votrevalue &amp;amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;pour-conclure&quot;&gt;Pour conclure &lt;a class=&quot;direct-link&quot; href=&quot;#pour-conclure&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;J&#39;èspere que ça vous sera utile :)&lt;/p&gt;
&lt;p&gt;Si vous souhaitez en savoir plus, je présente une session au Global Azure Bootcamp le 21 avril à l&#39;école 42 répondant au titre de : &amp;quot;(Terraform + Packer + Ansible) + Azure = &amp;lt;3 ?&amp;quot;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Os Factory Azure et Aws en Open Source avec Microsoft et Société Générale !
</title>
		<link href="/2018/03/28/os-factory-azure-et-aws/"/>
		<updated>2018-03-28T14:25:01+02:00</updated>
		<id>/2018/03/28/os-factory-azure-et-aws/</id>
		<content type="html">&lt;p&gt;Nous venons de publier le deuxième provider (Azure ;)) dans notre OS Factory qui permets de générer des images pour AWS et Azure ainsi que de les partager entre deux souscriptions Azure. Il reste encore du travail, mais elle est fonctionnelle et cerise sur le gateau, c&#39;est en Open Source!&lt;/p&gt;
&lt;p&gt;Un grand merci à &lt;span style=&quot;display: inline !important; float: none; background-color: transparent; color: #555555; cursor: text; font-family: &#39;Lato&#39;,&#39;Helvetica Neue&#39;,Arial,sans-serif; font-size: 18px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 25.71px; orphans: 2; text-align: left; text-decoration: none; text-indent: 0px; text-transform: none; -webkit-text-stroke-width: 0px; white-space: normal; word-spacing: 0px;&quot;&gt;la Société Générale (Yannick Neff), Microsoft France (Mandy Ayme),&lt;/span&gt; &lt;a href=&quot;https://www.wescale.fr/&quot;&gt;WeScale&lt;/a&gt; (Maxence Maireaux) et &lt;a href=&quot;https://www.cellenza.com/fr/&quot;&gt;Cellenza &lt;/a&gt;&lt;span style=&quot;display: inline !important; float: none; background-color: transparent; color: #555555; cursor: text; font-family: &#39;Lato&#39;,&#39;Helvetica Neue&#39;,Arial,sans-serif; font-size: 18px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 25.71px; orphans: 2; text-align: left; text-decoration: none; text-indent: 0px; text-transform: none; -webkit-text-stroke-width: 0px; white-space: normal; word-spacing: 0px;&quot;&gt;(moi)&lt;/span&gt;&lt;span style=&quot;display: inline !important; float: none; background-color: transparent; color: #555555; cursor: text; font-family: &#39;Lato&#39;,&#39;Helvetica Neue&#39;,Arial,sans-serif; font-size: 18px; font-style: normal; font-variant: normal; font-weight: 300; letter-spacing: normal; line-height: 25.71px; orphans: 2; text-align: left; text-decoration: none; text-indent: 0px; text-transform: none; -webkit-text-stroke-width: 0px; white-space: normal; word-spacing: 0px;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Le code est par ici :&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/societe-generale/os-factory&quot;&gt;https://github.com/societe-generale/os-factory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Coté techno, nous utilisons Ansible et Packer. Il faut effectuer un petit setup coté Azure, il vous faudra une VM Ubuntu, avec le MSI de configurer et un SPN, tout est dans le &lt;a href=&quot;https://github.com/societe-generale/os-factory#infrastructure-for-azure&quot;&gt;readme &lt;/a&gt;:)&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Microsoft Expérience 17 – VSTS For OPS part 3 !
</title>
		<link href="/2017/10/25/vsts-for-ops-part-3/"/>
		<updated>2017-10-25T12:11:10+02:00</updated>
		<id>/2017/10/25/vsts-for-ops-part-3/</id>
		<content type="html">&lt;p&gt;Dans cet article, je vous détaille la partie (cachée) de ma démo lors de ma session au Microsoft Expérience 17 avec Stanislas Quastana. Le but de cet article est de créer notre première build ! Les prochains arriveront rapidement, avec dans l’idée, de vous aider à mieux appréhender le CI/CD en tant qu’OPS, pour des sujets qui nous concernent, l’infra as code.&lt;br&gt;
Voici le chemin que nous allons suivre :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Préparation de l’environnement&lt;/li&gt;
&lt;li&gt;Préparation d’une image de base Linux&lt;/li&gt;
&lt;li&gt;Préparation d’une image de base Windows [nous sommes ici]&lt;/li&gt;
&lt;li&gt;Utilisation des images de base pour les spécialiser, afin de les rendre “Immutables”&lt;/li&gt;
&lt;li&gt;Déploiement d’image en CI/CD avec Packer et Terraform depuis VSTS&lt;br&gt;
Nous utiliserons des technologies Microsoft (VSTS, Azure, Windows Server…) mais aussi HashiCorp (Packer, Terraform) ainsi que des technologies Open Source (Linux..). Il n’est normalement pas nécessaire d’être, ni un maître du cloud, ni un demi dieu de l’infra as code pour suivre cette mini série de 4 articles.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;introduction&quot;&gt;Introduction &lt;a class=&quot;direct-link&quot; href=&quot;#introduction&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Voici un petit récapitulatif ce qu&#39;on aimerait :&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-365&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/Packer.png&quot; alt=&quot;&quot; width=&quot;1035&quot; height=&quot;472&quot;&gt;
&lt;p&gt;Vous devez créer deux comptes de stockage dans Azure vous même, un de &amp;quot;Production&amp;quot; et un &amp;quot;Eval&amp;quot; vous pouvez le faire avec Azure Cloud Shell depuis le portail Azure :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#create resource group
az group create -l westeurope -n vstsforops
#create storage account
az storage account create -n sto0eval -g vstsforops -l westeurope --sku Standard_LRS
az storage account create -n sto0prod -g vstsforops -lwesteurope --sku Standard_LRS
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Du coup je vous ai déjà préparer les éléments histoire de ne pas perdre de temps sur la construction des templates packer. Récupérez l&#39;archive ici : &lt;a href=&quot;https://github.com/EtienneDeneuve/vsts-for-ops/archive/master.zip&quot;&gt;   Download ZIP&lt;/a&gt;, puis copiez les fichiers dans votre répertoire que vous avez cloné la fois dernière. J&#39;ai fais quelques modifications sur la hiérarchie des dossiers afin que ça soit plus évolutif dans le temps, nous y reviendrons plus tard.&lt;/p&gt;
&lt;p&gt;Le fichier packer qui nous intéresse est dans le dossier /storage/windows/base/windows_base_packer.json, il est tout a fait standard, comme ceux que Stanislas détaille ici : &lt;a href=&quot;https://github.com/squasta/PackerAzureRM&quot;&gt;https://github.com/squasta/PackerAzureRM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vous noterez peut être que j&#39;ai ajouté un provisionner &amp;quot;windows-update&amp;quot; :&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;provisioners&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;type&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &amp;amp;quot;windows-update&amp;amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Celui n&#39;est pas standard, vous devez le mettre dans le même répertoire que votre exécutable packer, il est téléchargeable à l&#39;adresse suivante : &lt;a href=&quot;https://github.com/rgl/packer-provisioner-windows-update/releases&quot;&gt;https://github.com/rgl/packer-provisioner-windows-update/releases&lt;/a&gt; mais je l&#39;ai aussi inclus dans mon repository git au passage nous allons également mettre la dernière version de Packer. Ces actions sont à faire sur la machine &amp;quot;Agent&amp;quot; de &lt;a href=&quot;https://etienne.deneuve.xyz/2017/10/09/vsts-for-ops-1/&quot;&gt;vsts-for-ops-1&lt;/a&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt install unzip
wget https://github.com/rgl/packer-provisioner-windows-update/releases/download/v0.4.0/packer-provisioner-windows-update-linux.tgz
wget https://releases.hashicorp.com/packer/1.1.0/packer_1.1.0_linux_amd64.zip
tar -xvf ./packer-provisioner-windows-update-linux.tgz
unzip packer_1.1.0_linux_amd64.zip
mv ./packer-provisioner-windows-update-windows /usr/local/bin/
mv ./packer /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si vous n&#39;avez pas installé azure cli et l&#39;agent, vous pouvez aussi utiliser ce script sur votre vm agent:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/EtienneDeneuve/vsts-for-ops/master/scripts/platform/agent/prepare_vm.sh&quot;&gt;https://raw.githubusercontent.com/EtienneDeneuve/vsts-for-ops/master/scripts/platform/agent/prepare_vm.sh&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;bon-et-la-build-%3F&quot;&gt;Bon et La build ? &lt;a class=&quot;direct-link&quot; href=&quot;#bon-et-la-build-%3F&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Ouvrez VSTS :&lt;/p&gt;
&lt;p&gt;puis cliquez sur &amp;quot;build &amp;amp; release&amp;quot; :&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-372&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/Sans-titre.png&quot; alt=&quot;&quot; width=&quot;592&quot; height=&quot;164&quot;&gt;
&lt;p&gt;Puis sur &amp;quot;+ New&amp;quot;&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-361&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/vsts-create-1.png&quot; alt=&quot;&quot; width=&quot;1027&quot; height=&quot;158&quot;&gt;
&lt;p&gt;Puis sur &amp;quot;Empty process&amp;quot;&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-362&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/vsts-create-2.png&quot; alt=&quot;&quot; width=&quot;1035&quot; height=&quot;185&quot;&gt;
&lt;p&gt;Puis complétez le champs &amp;quot;Name&amp;quot; avec par exemple &amp;quot;Packer-Base-Windows 2012 R2&amp;quot;&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-363&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/vsts-create-3.png&quot; alt=&quot;&quot; width=&quot;1035&quot; height=&quot;475&quot;&gt;
&lt;p&gt;Dans la Phase 1 nous allons ajouter deux étape &amp;quot;build immutable image&amp;quot; et &amp;quot;azure cli&amp;quot; :&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-353&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/vsts-create-4.png&quot; alt=&quot;&quot; width=&quot;1035&quot; height=&quot;504&quot;&gt;
&lt;p&gt;Renseignez les variables telles que ci dessous :&lt;/p&gt;
&lt;p&gt;Packer Template : &amp;quot;User Provided&amp;quot;&lt;/p&gt;
&lt;p&gt;Packer template location, naviguer vers &amp;quot;storage/Windows/base/windows_base_packer.json&amp;quot;&lt;/p&gt;
&lt;p&gt;Dans le template parameters (je suis sympa, copiez collez ca :):&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;client_id&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&amp;amp;quot;$(ARM_CLIENT_ID)&amp;amp;quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;client_secret&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&amp;amp;quot;$(ARM_CLIENT_SECRET)&amp;amp;quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;resource_group_name&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&amp;amp;quot;$(ARM_RESOURCE_GROUP_NAME)&amp;amp;quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;storage_account&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&amp;amp;quot;$(ARM_STORAGE_ACCOUNT)&amp;amp;quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;subscription_id&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&amp;amp;quot;$(ARM_SUBSCRIPTION_ID)&amp;amp;quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;object_id&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&amp;amp;quot;$(ARM_OBJECT_ID)&amp;amp;quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;tenant_id&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&amp;amp;quot;$(ARM_TENANT_ID)&amp;amp;quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;windows_sku&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&amp;amp;quot;$(WINDOWS_SKU)&amp;amp;quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;build_resquestfor&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&amp;amp;quot;$(BUILD_REQUESTEDFOR)&amp;amp;quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;location&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&amp;amp;quot;$(ARM_LOCATION)&amp;amp;quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;vm_size&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&amp;amp;quot;$(ARM_VM_SIZE)&amp;amp;quot;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;amp;quot;capture_name&amp;amp;quot;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&amp;amp;quot;$(CAPTURE_NAME)&amp;amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puis, dans &amp;quot;Output&amp;quot;, renseigner IMAGEURI :&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-354&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/vsts-create-5.png&quot; alt=&quot;&quot; width=&quot;1108&quot; height=&quot;727&quot;&gt;
&lt;p&gt;Ajoutez maintenant une tâche &amp;quot;Azure CLI&amp;quot; :&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-355&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/vsts-create-6.png&quot; alt=&quot;&quot; width=&quot;1035&quot; height=&quot;560&quot;&gt;
&lt;p&gt;Sélectionnez votre souscription azure (si elle n&#39;est pas dans la liste, cliquez sur manage et ajoutez la) et indiquez le chemin vers le script bash &amp;quot;script/platform/tasks/az-move-vhd.vhd&amp;quot; et ajoutez les arguments &amp;quot;-d &amp;quot;$(DESTACCOUNTKEY)&amp;quot; -s &amp;quot;$(SOURCEACCOUNTKEY)&amp;quot;&amp;quot;&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-356&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/vsts-create-7.png&quot; alt=&quot;&quot; width=&quot;1109&quot; height=&quot;648&quot;&gt;
&lt;p&gt;Une fois que ces deux tâches sont complétées, nous allons déclarer nos variables (si vous ne savez pas comment les récupérées, suivez le guide sur le dépôt git de Stanislas plus haut) :&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-357&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/vsts-create-8.png&quot; alt=&quot;&quot; width=&quot;1112&quot; height=&quot;893&quot;&gt;
&lt;p&gt;Vous remarquerez que certaines sont masquées, rien de bien compliqué, cliquez sur le cadenas et elle sera &amp;quot;protégée&amp;quot; :&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-358&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/vsts-create-9.png&quot; alt=&quot;&quot; width=&quot;990&quot; height=&quot;108&quot;&gt;
&lt;p&gt;Dans l’idéal, les variables a protégées seraient : ARM_CLIENT_SECRET, ARM_SUBSCRIPTION_ID, ARM_TENANT_ID, DESTACCOUNTKEY, SOURCEACCOUNTKEY mais pour des questions de simplifications dans cet exercices, nous ne protégerons que les clés du compte de stockage, nous corrigerons par la suite.&lt;/p&gt;
&lt;p&gt;Pour récupérer les clés des comptes de stockage sélectionnez votre compte de stockage dans le resource group que vous avez créer et allez dans &amp;quot;Access Keys&amp;quot; :&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-360&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/storage-account-key.png&quot; alt=&quot;&quot; width=&quot;1108&quot; height=&quot;557&quot;&gt;
&lt;p&gt;Ensuite, comme nous allons construire des images Packer Windows, il y a des chances pour que la build dure plus d&#39;une heure (Mise à jour etc) donc dans les options de la build nous allons passer le time out de la build a 240 minutes :&lt;/p&gt;
&lt;img class=&quot;alignnone wp-image-378 size-full&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/timeout-e1508918816983.png&quot; alt=&quot;&quot; width=&quot;1225&quot; height=&quot;545&quot;&gt;
&lt;p&gt;Cliquez maintenant sur &amp;quot;Save &amp;amp; Queue&amp;quot;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Votre build est maintenant lancé.&lt;/p&gt;
&lt;p&gt;Dans le prochain article nous verrons en détail cette partie de &amp;quot;build&amp;quot; et surtout comprendre comment ça fonctionne (ou pas :))&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Microsoft Expérience 17 – VSTS For OPS part 2 !
</title>
		<link href="/2017/10/13/vsts-for-ops-2/"/>
		<updated>2017-10-13T14:15:42+02:00</updated>
		<id>/2017/10/13/vsts-for-ops-2/</id>
		<content type="html">&lt;p&gt;Dans cet article, je vous détaille la partie (cachée) de ma démo lors de ma session au Microsoft Expérience 17 avec Stanislas Quastana. Le but de cet article est de préparer les éléments nécessaire a notre usine à images systèmes. Les prochains arriverons rapidement, avec dans l&#39;idée, de vous aider à mieux appréhendez le CI/CD en tant qu&#39;OPS, pour des sujets qui nous concernent, l&#39;infra as code.&lt;br&gt;
Voici le chemin que nous allons suivre :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Préparation de l&#39;environnement [nous sommes ici, toujours]&lt;/li&gt;
&lt;li&gt;Préparation d&#39;une image de base Linux&lt;/li&gt;
&lt;li&gt;Préparation d&#39;une image de base Windows&lt;/li&gt;
&lt;li&gt;Utilisation des images de base pour les spécialiser, afin de les rendre &amp;quot;Immutables&amp;quot;&lt;/li&gt;
&lt;li&gt;Déploiement d&#39;image en CI/CD avec Packer et Terraform depuis VSTS&lt;br&gt;
Nous utiliserons des technologies Microsoft (VSTS, Azure, Windows Server...) mais aussi HashiCorp (Packer, Terraform) ainsi que des technologies Open Source (Linux..). Il n&#39;est normalement pas nécessaire d’être, ni un maître du cloud, ni un demi dieu de l&#39;infra as code pour suivre cette mini séries de 4 articles.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;introduction&quot;&gt;Introduction &lt;a class=&quot;direct-link&quot; href=&quot;#introduction&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Avant de foncer dans le code de notre infra, nous allons devoir réflechir à l&#39;organisation de nos dossier de &amp;quot;Code&amp;quot;.&lt;/p&gt;
&lt;img class=&quot;alignnone size-medium wp-image-336&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/mirror-frame-2407289_960_720-195x300.png&quot; alt=&quot;&quot; width=&quot;195&quot; height=&quot;300&quot;&gt;
&lt;p&gt;Ok, maintenant qu&#39;on à réflechi, on y va !&lt;/p&gt;
&lt;p&gt;Nous allons générer deux images de base Ubuntu et Windows Server, utiliser des scripts &amp;quot;commun&amp;quot; et des scripts spécifiques, puis spécialiser nos images.&lt;/p&gt;
&lt;h1 id=&quot;let&#39;s-git-!&quot;&gt;Let&#39;s Git ! &lt;a class=&quot;direct-link&quot; href=&quot;#let&#39;s-git-!&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;dolly%2C-ou-clone%2C-comme-vous-voulez.&quot;&gt;Dolly, ou Clone, comme vous voulez. &lt;a class=&quot;direct-link&quot; href=&quot;#dolly%2C-ou-clone%2C-comme-vous-voulez.&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ouvrez donc Visual Studio Code (&lt;a href=&quot;https://etienne.deneuve.xyz/2017/01/26/visual-studio-code-pour-ansible-terraform/&quot;&gt;Quoi ? Il est pas déjà installé? &lt;/a&gt;) et ajoutez votre repository Git VSTS dans VS Code (Vous devez installer &lt;a href=&quot;http://lmgtfy.com/?q=install+git&quot;&gt;Git&lt;/a&gt; sur votre poste avant).&lt;/p&gt;
&lt;p&gt;C&#39;est assez simple, cliquez sur &amp;quot;Clone Git Repository&amp;quot;:&lt;/p&gt;
&lt;img class=&quot;alignnone size-medium wp-image-337&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/Git-Clone-300x217.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;217&quot;&gt;
&lt;p&gt;Récupérez l&#39;url de votre repository dans VSTS :&lt;/p&gt;
&lt;img class=&quot;alignnone wp-image-339 size-full&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/Git-Clone-2-1.png&quot; alt=&quot;&quot; width=&quot;1055&quot; height=&quot;513&quot;&gt;
&lt;p&gt;Puis collez le dans la barre de VS code :&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-340&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/Git-Clone-3.png&quot; alt=&quot;&quot; width=&quot;835&quot; height=&quot;161&quot;&gt;
&lt;p&gt;Entrez votre destination, par exemple c:\Users\vous\Documents\git (la racine, le dossier sera créer automatiquement) , puis indiquez vos credentials VSTS, et enfin lorsque le clone est terminé, cliquez sur &amp;quot;Open This repository&amp;quot;:&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-341&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/Git-Clone-4.png&quot; alt=&quot;&quot; width=&quot;1178&quot; height=&quot;52&quot;&gt;
&lt;p&gt;Félicitations, vous avez réussi a cloner votre git vsts sur votre poste!&lt;/p&gt;
&lt;blockquote&gt;Ouais, mais moi j&#39;y comprends rien à Git, j&#39;vais jamais m&#39;en sortir !&lt;/blockquote&gt;
&lt;h2&gt;Git, comment ça marche&lt;/h2&gt;
Bon, on va faire simple, Git en usage basique comme on va le faire, ce n&#39;est que quelques opérations :
&lt;ol&gt;
 	&lt;li&gt;Git clone -&amp;gt; On récupère un git distant sur notre poste de travail&lt;/li&gt;
 	&lt;li&gt;Git Add -&amp;gt; on ajoute les fichiers dans le git &quot;local&quot;&lt;/li&gt;
 	&lt;li&gt;Git Commit -&amp;gt; on valide nos modification (en local)&lt;/li&gt;
 	&lt;li&gt;Git pull -&amp;gt; on va chercher les modifications coté remote&lt;/li&gt;
 	&lt;li&gt;Git push -&amp;gt; on pousse nos modifciation vers remote&lt;/li&gt;
&lt;/ol&gt;
Vous inquiétez pas, VS Code va faire beaucoup à notre place !
&lt;h2&gt;Création des dossiers&lt;/h2&gt;
&lt;blockquote&gt;Il faut quand même savoir une petite chose de plus, Git ne gère pas les dossiers vide, il faut donc créer un petit fichier readme.md pour les synchroniser correctement.&lt;/blockquote&gt;
Pour créer les dossiers, soit vous le faite en &quot;graphique&quot; :
&lt;img class=&quot;alignnone size-full wp-image-344&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/addfolder-1.png&quot; alt=&quot;&quot; width=&quot;532&quot; height=&quot;193&quot;&gt;
&lt;p&gt;Soit via le terminal intégrer avec vos commandes préférées (View -&amp;gt; Integrated Terminal).&lt;/p&gt;
&lt;p&gt;Personnellement j&#39;ai créer 4 dossiers à la racine  : scripts, windows, ubuntu et specialized, puis dans les dossiers Windows et Ubuntu un sous-dossier scripts. dans chacun de ces dossiers ajouter donc un fichier vide &lt;a href=&quot;http://readme.md&quot;&gt;readme.md&lt;/a&gt; (et sauvegardez-les). Vous verrez plus tard le &amp;quot;pourquoi&amp;quot; cette arborescence :).&lt;/p&gt;
&lt;h2 id=&quot;commit-!&quot;&gt;Commit ! &lt;a class=&quot;direct-link&quot; href=&quot;#commit-!&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Maintenant on va &amp;quot;commit&amp;quot; nos modifications en cliquant sur les boutons (et en écrivant le pourquoi du commit :)) :&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-346&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/Git-Commit.png&quot; alt=&quot;&quot; width=&quot;549&quot; height=&quot;396&quot;&gt;
&lt;p&gt;Youpi! votre premier commit ! (c’était dur?)&lt;/p&gt;
&lt;h2 id=&quot;push&quot;&gt;Push &lt;a class=&quot;direct-link&quot; href=&quot;#push&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Avec notre premier commit, en bas de notre fenêtre VS Code, nous avons désormais un commit à envoyer :&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-347&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/Push.png&quot; alt=&quot;&quot; width=&quot;290&quot; height=&quot;522&quot;&gt; Le chiffre de gauche correspond aux modifications distante (vos collègues), celui de droite, les locales (les votre quoi :))&lt;/p&gt;
&lt;p&gt;Pour savoir ce qui se passe, ouvre la console &amp;quot;Output&amp;quot; (View, Output, puis sélectionnez Git dans le menu déroulant à gauche)&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-348&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/Git-Push.png&quot; alt=&quot;&quot; width=&quot;1010&quot; height=&quot;522&quot;&gt;
&lt;p&gt;Allez dans VSTS sur votre navigateur, vous avez tous vos fichiers qui se trouvent désormais sur le Server.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;#conclusion&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Désormais, vous avez un beau Projet VSTS, cloner en local, et vous savez envoyer vos fichiers dans le repository git distant. Nous allons pouvoir passer a la suite !&lt;/p&gt;
&lt;p&gt;N&#39;hésitez pas à commenter ou à me contacter en cas de soucis avec ces deux premières parties !&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Microsoft Expérience 17 &amp;#8211; VSTS For OPS part 1 !</title>
		<link href="/2017/10/09/vsts-for-ops-1/"/>
		<updated>2017-10-09T20:30:55+02:00</updated>
		<id>/2017/10/09/vsts-for-ops-1/</id>
		<content type="html">&lt;p&gt;Dans cet article, je vous détaille la partie (cachée) de ma démo lors de ma session au Microsoft Expérience 17 avec Stanislas Quastana. Le but de cet article est de préparer le terrain pour les articles suivants. Les prochains arriverons rapidement, avec dans l&#39;idée, de vous aider à mieux appréhendez le CI/CD en tant qu&#39;OPS, pour des sujets qui nous concernent, l&#39;infra as code.&lt;br&gt;
Voici le chemin que nous allons suivre :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Préparation de l&#39;environnement [nous sommes ici]&lt;/li&gt;
&lt;li&gt;Préparation d&#39;une image de base Linux&lt;/li&gt;
&lt;li&gt;Préparation d&#39;une image de base Windows&lt;/li&gt;
&lt;li&gt;Utilisation des images de base pour les spécialiser, afin de les rendre &amp;quot;Immutables&amp;quot;&lt;/li&gt;
&lt;li&gt;Déploiement d&#39;image en CI/CD avec Packer et Terraform depuis VSTS&lt;br&gt;
Nous utiliserons des technologies Microsoft (VSTS, Azure, Windows Server...) mais aussi HashiCorp (Packer, Terraform) ainsi que des technologies Open Source (Linux..). Il n&#39;est normalement pas nécessaire d’être, ni un maître du cloud, ni un demi dieu de l&#39;infra as code pour suivre cette mini séries de 4 articles.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;cr%C3%A9ation-des-comptes-n%C3%A9cessaire&quot;&gt;Création des comptes nécessaire &lt;a class=&quot;direct-link&quot; href=&quot;#cr%C3%A9ation-des-comptes-n%C3%A9cessaire&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Il faut créer un compte sur Visual Studio Team Services &lt;a href=&quot;https://go.microsoft.com/fwlink/?LinkId=307137&quot;&gt;ici&lt;/a&gt; et un compte Azure &lt;a href=&quot;https://azure.microsoft.com/fr-fr/offers/ms-azr-0044p/&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;cr%C3%A9ation-du-workspace-vsts&quot;&gt;Création du Workspace VSTS &lt;a class=&quot;direct-link&quot; href=&quot;#cr%C3%A9ation-du-workspace-vsts&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;cr%C3%A9ation-du-projet&quot;&gt;Création du Projet &lt;a class=&quot;direct-link&quot; href=&quot;#cr%C3%A9ation-du-projet&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://%7Bvotrenomavous%7D.visualstudio.com/_projects?_a=new&quot;&gt;https://{votrenomavous}.visualstudio.com/_projects?_a=new&lt;/a&gt;&lt;br&gt;
Indiquez le nom que vous souhaitez et sélectionnez Git comme &amp;quot;Version Control&amp;quot; :&lt;/p&gt;
&lt;img class=&quot;alignnone wp-image-322 size-full&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/vsts-1-1.png&quot; alt=&quot;&quot; width=&quot;1680&quot; height=&quot;793&quot;&gt;
&lt;h2 id=&quot;initialisation-du-repository&quot;&gt;Initialisation du repository &lt;a class=&quot;direct-link&quot; href=&quot;#initialisation-du-repository&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;img class=&quot;alignnone size-full wp-image-323&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/vsts-2-1.png&quot; alt=&quot;&quot; width=&quot;1675&quot; height=&quot;697&quot;&gt;
## C&#39;est prêt !
&lt;img class=&quot;alignnone size-full wp-image-324&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/vsts-3-1.png&quot; alt=&quot;&quot; width=&quot;1239&quot; height=&quot;326&quot;&gt;
&lt;p&gt;Voila, 3 étapes, notre premier projet est &amp;quot;prêt&amp;quot;.&lt;/p&gt;
&lt;h1 id=&quot;pr%C3%A9paration-de-l&#39;agent-pour-vsts&quot;&gt;Préparation de l&#39;Agent pour VSTS &lt;a class=&quot;direct-link&quot; href=&quot;#pr%C3%A9paration-de-l&#39;agent-pour-vsts&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;pr%C3%A9paration-de-la-vm&quot;&gt;Préparation de la VM &lt;a class=&quot;direct-link&quot; href=&quot;#pr%C3%A9paration-de-la-vm&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dans Azure, avec le &lt;a href=&quot;https://github.com/Azure/azure-quickstart-templates/tree/master/101-vm-simple-linux&quot;&gt;template suivant&lt;/a&gt;, déployez une vm Ubuntu basique.&lt;br&gt;
Installez les prérequis de l&#39;agent VSTS via les commandes suivantes :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install -y libunwind8 libcurl3
sudo apt-add-repository ppa:git-core/ppa
sudo apt-get update
sudo apt-get install git
apt-get install libcurl4-openssl-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Installation de l&#39;agent&lt;/h2&gt;
&lt;h3&gt;Préparation dans VSTS&lt;/h3&gt;
Accédez à la partie sécurité https://{votrenomavous}.visualstudio.com/_details/security/tokens et créer un PAT (Personnal Access Tokens).
&lt;blockquote&gt;Attention, c&#39;est comme un mot de passe, il ne faut pas le diffuser. (Keepass, LastPass et autres peuvent les stocker correctement!).&lt;/blockquote&gt;
Dans notre cas, l&#39;agent devra avoir les droits Agent Pools et Deployment Group, car nous n&#39;utiliserons qu&#39;un seul agent. En prod, séparez-les !
&lt;h3&gt;Installation de l&#39;agent&lt;/h3&gt;
```
wget https://github.com/Microsoft/vsts-agent/releases/download/v2.123.0/vsts-agent-ubuntu.16.04-x64-2.123.0.tar.gz -O vsts-agent-ubuntu.16.04-x64-2.123.0.tar.gz
mkdir agent &amp;amp;&amp;amp; cd agent
tar -xvf ../vsts-agent-ubuntu.16.04-x64-2.123.0.tar.gz
./config.sh
&lt;h1 id=&quot;r%C3%A9pondez-aux-questions&quot;&gt;Répondez aux questions &lt;a class=&quot;direct-link&quot; href=&quot;#r%C3%A9pondez-aux-questions&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;sudo ./svc.sh install&lt;br&gt;
sudo ./svc.sh start&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Pour plus d&#39;info sur l&#39;[agent VSTS](https://docs.microsoft.com/fr-fr/vsts/build-release/actions/agents/v2-linux)
&amp;lt;h3&amp;gt;Vérification dans VSTS&amp;lt;/h3&amp;gt;
Si vous accédez à l&#39;url https://{votrenomavous}.visualstudio.com/_admin/_AgentPool vous devriez voir que votre agent est en vert !
&amp;lt;img class=&amp;quot;alignnone size-full wp-image-321&amp;quot; src=&amp;quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/Capture-Agent-Pool.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;565&amp;quot; height=&amp;quot;145&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Microsoft Experience 17 : Infrastructure as Code : modélisez et provisionnez vos services Azure avec Terraform et Packer</title>
		<link href="/2017/10/01/microsoft-experience-17-infrastructure-code-modelisez-et-provisionnez-vos-services-azure-avec-terraform-et-packer/"/>
		<updated>2017-10-01T22:14:55+02:00</updated>
		<id>/2017/10/01/microsoft-experience-17-infrastructure-code-modelisez-et-provisionnez-vos-services-azure-avec-terraform-et-packer/</id>
		<content type="html">&lt;p&gt;Bonsoir,&lt;/p&gt;
&lt;p&gt;Retrouvez moi Mercredi 4 pour Microsoft Expérience 17 !&lt;/p&gt;
&lt;p&gt;Voici ma fiche pour retrouver mes infos :&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://experiences17.microsoft.fr/attendee/5d302924-bb93-e711-80c2-000d3a2103ab&quot;&gt;https://experiences17.microsoft.fr/attendee/5d302924-bb93-e711-80c2-000d3a2103ab5002826&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Je serais en session avec &lt;a href=&quot;https://stanislas.io&quot;&gt;Stanislas Quastana &lt;/a&gt;pour la session &lt;span class=&quot;fieldval&quot;&gt;&lt;span class=&quot;fieldtext&quot;&gt;&lt;a href=&quot;https://experiences17.microsoft.fr/session/051cd784-895a-e711-80c2-000d3a21081a&quot;&gt;Infrastructure as Code : modélisez et provisionnez vos services Azure avec Terraform et Packer &lt;/a&gt;de 13h30 à 14h15.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>MVP !</title>
		<link href="/2017/10/01/mvp/"/>
		<updated>2017-10-01T18:51:55+02:00</updated>
		<id>/2017/10/01/mvp/</id>
		<content type="html">&lt;p&gt;C&#39;est avec un certain plaisir que je vous l&#39;annonce, je suis désormais MVP Cloud and Datacenter Management !&lt;/p&gt;
&lt;p&gt;Alors du coup merci à tous !&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-310&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/10/MVP.png&quot; alt=&quot;&quot; width=&quot;719&quot; height=&quot;554&quot;&gt;</content>
	</entry>
	
	<entry>
		<title>Mon premier it.cast avec Maxime et Pascal (et les autres) !
</title>
		<link href="/2017/09/29/mon-premier-itcast/"/>
		<updated>2017-09-29T18:32:41+02:00</updated>
		<id>/2017/09/29/mon-premier-itcast/</id>
		<content type="html">&lt;p&gt;Bonjour !&lt;/p&gt;
&lt;p&gt;Voici mon premier IT Cast de &lt;a href=&quot;https://twitter.com/MaximeRastello&quot;&gt;Maxime&lt;/a&gt; et &lt;a href=&quot;https://twitter.com/psauliere&quot;&gt;Pascal&lt;/a&gt; avec &lt;a href=&quot;https://twitter.com/Tseyf34&quot;&gt;Seyfallah Tagrerout&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/LopesMick&quot;&gt;Mickaël Lopes&lt;/a&gt; et, en envoyé spécial a Orlando pour Microsoft Ignite, &lt;a href=&quot;https://twitter.com/jfberenguer_pro&quot;&gt;Jean-François Bérenguer!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://itcast.io/podcast/episode-48-de-honolulu-a-orlando/&quot;&gt;http://itcast.io/podcast/episode-48-de-honolulu-a-orlando/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;J&#39;espere que ça vous plaira !&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Cell&amp;#8217;insights &amp;#8211; &amp;#8220;ISV, Journey to the Cloud&amp;#8221; dans les bacs!</title>
		<link href="/2017/09/27/cellinsights-isv-journey-cloud-dans-les-bacs/"/>
		<updated>2017-09-27T12:53:44+02:00</updated>
		<id>/2017/09/27/cellinsights-isv-journey-cloud-dans-les-bacs/</id>
		<content type="html">&lt;p&gt;Mes collègues de Cellenza viennent de sortir un nouveau Cell&#39;Insights !&lt;/p&gt;
&lt;p&gt;Pour le téléchargez (Gratos !): &lt;a href=&quot;http://www.cellenza.com/fr/cellinsights-8-isv-journey-to-the-cloud/&quot;&gt;http://www.cellenza.com/fr/cellinsights-8-isv-journey-to-the-cloud/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bravo à Laurent, Manon et Michel !&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Azure Powershell &amp;#8211; Nettoyer les Tags</title>
		<link href="/2017/09/27/azure-powershell-nettoyer-les-tags/"/>
		<updated>2017-09-27T12:48:30+02:00</updated>
		<id>/2017/09/27/azure-powershell-nettoyer-les-tags/</id>
		<content type="html">&lt;p&gt;Quand on fait de l&#39;Azure, il peut arriver qu&#39;on souhaite nettoyer les Tags, pour de multiples raisons.&lt;/p&gt;
&lt;p&gt;Voici un peu  de Powershell pour :&lt;/p&gt;
&lt;ol&gt;
 	&lt;li&gt;Enlever les Tags des Ressources Groupes&lt;/li&gt;
 	&lt;li&gt;Enlever les Tags des Ressources&lt;/li&gt;
 	&lt;li&gt;et enfin Supprimer les Tags&lt;/li&gt;
&lt;/ol&gt;
Comme hier, dans notre script, il faut être connecter sur Azure donc on utilise la &lt;a href=&quot;https://etienne.deneuve.xyz/2017/09/26/azurepscmdnotfound/&quot;&gt;fonction d&#39;hier&lt;/a&gt; (pratique :)):
&lt;pre&gt;&lt;code class=&quot;PowerShell hljs&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; Check-AzureRMSession () {
&lt;span class=&quot;hljs-variable&quot;&gt;$Error&lt;/span&gt;.Clear()
&lt;span class=&quot;hljs-comment&quot;&gt;#if context already exist&lt;/span&gt;
&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
Get-AzureRmVM -ErrorAction Stop | &lt;span class=&quot;hljs-built_in&quot;&gt;Out-Null&lt;/span&gt;
}
&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; [System.Management.Automation.PSInvalidOperationException] {
Login-AzureRmAccount
}
&lt;span class=&quot;hljs-variable&quot;&gt;$Error&lt;/span&gt;.Clear();
}&lt;/code&gt;&lt;/pre&gt;
Ensuite la fonction :
&lt;pre&gt;&lt;code class=&quot;PowerShell hljs&quot;&gt;function Remove-AzureRMAllTags () {
Get-AzureRmResourceGroup | Out-GridView -PassThru | Set-AzureRmResourceGroup -Tag @{}
Get-AzureRmResource | Select Name,ResourceType,Tags,ResourceGroupName |  Out-GridView -PassThru | Set-AzureRmResource -Tag @{} -Force
Get-AzureRMTag |  Out-GridView -PassThru | Remove-AzureRMTag 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;code class=&quot;PowerShell hljs&quot;&gt;Out-GridView -PassThru&lt;/code&gt; Vous permet de choisir ceux que vous souhaitez supprimer :)</content>
	</entry>
	
	<entry>
		<title>FRPSUG &amp;#8211; Powershell Saturday et contenu de la session (de l&amp;#8217;utile, ou pas)</title>
		<link href="/2017/09/27/frpsug-powershell-saturday-et-contenu-de-la-session-de-lutile-ou-pas/"/>
		<updated>2017-09-27T00:19:54+02:00</updated>
		<id>/2017/09/27/frpsug-powershell-saturday-et-contenu-de-la-session-de-lutile-ou-pas/</id>
		<content type="html">&lt;p&gt;Suite au premier French PowerShell Saturday du &lt;a href=&quot;https://frpsug.github.io&quot;&gt;FRPSUG&lt;/a&gt; à Paris Le Samedi 16 septembre, dans les locaux de &lt;a href=&quot;http://www.cellenza.com/fr/&quot;&gt;Cellenza.&lt;/a&gt; (la où je bosse, pour ceux qui ne le savent pas!)&lt;/p&gt;
&lt;p&gt;Si vous ne connaissez pas encore FRPSUG (Quoi???)&lt;/p&gt;
&lt;blockquote&gt;Utiliser le channel #french sur &lt;a href=&quot;https://powershell.slack.com/Slack&quot;&gt;PowerShell.slack.com&lt;/a&gt; (&lt;a href=&quot;http://slack.poshcode.org/&quot;&gt;S’inscrire&lt;/a&gt;)
&lt;p&gt;Allez sur le GitHub : &lt;a href=&quot;https://github.com/FrPSUG&quot;&gt;https://github.com/FrPSUG&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;
&lt;h1 id=&quot;ma-session-%3A&quot;&gt;Ma session : &lt;a class=&quot;direct-link&quot; href=&quot;#ma-session-%3A&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Avec &lt;a href=&quot;https://twitter.com/LopesMick&quot;&gt;Mickael Lopes&lt;/a&gt; on avait décidé de faire une session &amp;quot;à la cool&amp;quot; où on a montré quelques petits scripts inutiles (ou pas...)&lt;/p&gt;
&lt;p&gt;Nous considérons que on peut tout aussi bien apprendre en s&#39;amusant, l&#39;event était un samedi, donc il fallait bien s&#39;amuser un peu !&lt;/p&gt;
&lt;p&gt;Je vous joins nos slides ! &lt;a href=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/FRPSUG.pptx&quot;&gt;FRPSUG&lt;/a&gt; (OpenSource MIT!)&lt;/p&gt;
&lt;h1 id=&quot;premi%C3%A8re-d%C3%A9mo&quot;&gt;Première démo &lt;a class=&quot;direct-link&quot; href=&quot;#premi%C3%A8re-d%C3%A9mo&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Devant la foule en délire (ou pas... on s&#39;est rendu compte que sur les pc type Surface, ça ne marche pas!) :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp;lt;div&amp;amp;gt;start-job {&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(440,500)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(440,500)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(440,500)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(349,350)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(523,150)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(440,500)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(349,350)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(523,150)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(440,1000)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(659,500)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(659,500)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(659,500)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(698,350)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(523,150)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(415,500)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(349,350)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(523,150)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;[console]::beep(440,1000)&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;}&amp;amp;lt;/div&amp;amp;gt;
&amp;amp;lt;div&amp;amp;gt;```&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;Ok bon, pour ceux qui ne peuvent reconnaître, c&#39;est la marche impériale.&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;# Deuxième Démo :&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;Comment on attaque les API de la SNCF en Powershell :&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;https://etienne.deneuve.xyz/2015/12/16/get-nexttrain/&amp;quot;&amp;gt;https://etienne.deneuve.xyz/2015/12/16/get-nexttrain/&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;# Troisième Démo:&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;Comment on récupère le statut de l&#39;encre sur un printer HP :&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;https://etienne.deneuve.xyz/2016/01/15/get-ink-level-from-hp-printers-in-powershell/&amp;quot;&amp;gt;https://etienne.deneuve.xyz/2016/01/15/get-ink-level-from-hp-printers-in-powershell/&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;# Quatrième Démo :&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;Comment on se connecte à des PaloAlto en PowerShell !&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/EtienneDeneuve/Powershell/blob/master/PaloAlto/Get-PaloAlto.ps1&amp;quot;&amp;gt;https://github.com/EtienneDeneuve/Powershell/blob/master/PaloAlto/Get-PaloAlto.ps1&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;# Cinquième Démo :&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;Manipulation de OneDrive via les API, en Powershell :&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/EtienneDeneuve/Powershell/blob/master/OneDriveAPI/Remove-AllOneDriveSharedLink.ps1&amp;quot;&amp;gt;https://github.com/EtienneDeneuve/Powershell/blob/master/OneDriveAPI/Remove-AllOneDriveSharedLink.ps1&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;# Sixième Démo :&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;Un script que j&#39;ai fait pour un client (merci !), pour mettre en place IpSec en mode transports sur les 5 ou 6 domaines :&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/EtienneDeneuve/Powershell/blob/master/IpSec/Invoke-IPSec.ps1&amp;quot;&amp;gt;https://github.com/EtienneDeneuve/Powershell/blob/master/IpSec/Invoke-IPSec.ps1&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;Vous pouvez bien sûr les utiliser, les modifier et m&#39;en proposer d&#39;autres !&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div&amp;gt;Un grand merci à :&amp;lt;/div&amp;gt;
&amp;lt;ul&amp;gt;
 	&amp;lt;li&amp;gt;l&#39;équipe de Cellenza pour les locaux&amp;lt;/li&amp;gt;
 	&amp;lt;li&amp;gt;Metsys pour la bouffe&amp;lt;/li&amp;gt;
 	&amp;lt;li&amp;gt;FRPSUG pour être venu&amp;lt;/li&amp;gt;
 	&amp;lt;li&amp;gt;à tous ceux qui sont venus&amp;lt;/li&amp;gt;
 	&amp;lt;li&amp;gt;et également à ceux qui ne sont pas venus, la nourriture prévue pour eux est partie nourrir des personnes dans le besoin (Merci &amp;lt;a href=&amp;quot;https://fr.linkedin.com/in/guillaume-mathieu-785431119&amp;quot;&amp;gt;Guillaume Matthieu&amp;lt;/a&amp;gt; !)&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;amp;nbsp;

Si vous étiez là, ça vous a plu ?
&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Azure Powershell &amp;#8211; Comment on fait quand ca n&amp;#8217;existe pas ?</title>
		<link href="/2017/09/26/azurepscmdnotfound/"/>
		<updated>2017-09-26T23:16:06+02:00</updated>
		<id>/2017/09/26/azurepscmdnotfound/</id>
		<content type="html">&lt;h1 id=&quot;la-vie-dans-azure&quot;&gt;La vie dans Azure &lt;a class=&quot;direct-link&quot; href=&quot;#la-vie-dans-azure&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Bon, admettons, vous avez besoin de filter vos VM avec le type d&#39;OS déployé dessus afin de savoir si vous avez plus de Linux ou de Windows dans Azure.&lt;/p&gt;
&lt;p&gt;Avec Powershell, on se dit &amp;quot;ouais, c&#39;est facile&amp;quot;. Un petit coup de Get-AzureRMVM et hop...&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-275&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/get-cazurevmos-1-gvm.png&quot; alt=&quot;&quot; width=&quot;737&quot; height=&quot;104&quot;&gt;
&lt;p&gt;Cool, &amp;quot;OsType&amp;quot;, pile ce qu&#39;on cherche, aller hop, on filtre avec | Select-Object&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-276&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/get-cazurevmos-2-so.png&quot; alt=&quot;&quot; width=&quot;705&quot; height=&quot;84&quot;&gt;
&lt;p&gt;et ouais, c&#39;est tout vide ! Et l&#39;aide elle dit quoi ? Pas grand chose de plus :&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-277&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/get-cazurevmos-3-help.png&quot; alt=&quot;&quot; width=&quot;976&quot; height=&quot;310&quot;&gt;
&lt;p&gt;On a plus le choix, on y va!&lt;/p&gt;
&lt;p&gt;&amp;gt; On va dedans !&lt;/p&gt;
&lt;h2 id=&quot;v%C3%A9rification-des-membres&quot;&gt;Vérification des membres &lt;a class=&quot;direct-link&quot; href=&quot;#v%C3%A9rification-des-membres&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Avec un petit Get-Member on liste les membres de la commande Get-AzureRMVM&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-278&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/get-cazurevmos-4-gm.png&quot; alt=&quot;&quot; width=&quot;1188&quot; height=&quot;486&quot;&gt;
&lt;p&gt;On voit que &amp;quot;OsType&amp;quot; n&#39;existe pas, c&#39;est donc une commande qui utilise une propriété calculée.&lt;br&gt;
En revanche un élément , OsProfile, parait correspondre au besoin.&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-279&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/get-cazurevmos-5-osp.png&quot; alt=&quot;&quot; width=&quot;796&quot; height=&quot;24&quot;&gt;
&lt;p&gt;On tente le Select-Object ?&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-280&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/get-cazurevmos-6-os.png&quot; alt=&quot;&quot; width=&quot;582&quot; height=&quot;83&quot;&gt;
&lt;p&gt;Raté, ce coquin est un autre objet ! Etendons le !&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-281&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/get-cazurevmos-7-exp.png&quot; alt=&quot;&quot; width=&quot;737&quot; height=&quot;161&quot;&gt;
&lt;p&gt;Super! On a trouvé un truc!&lt;/p&gt;
&lt;h2 id=&quot;on-script-%3F&quot;&gt;On script ? &lt;a class=&quot;direct-link&quot; href=&quot;#on-script-%3F&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Déjà, on sait de base que le Script, on va s&#39;en servir au moins une fois ;) donc pour le construire, il faut se poser quelques bonnes questions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connexion a Azure ?&lt;/li&gt;
&lt;li&gt;Son nom (qui claque !)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;le-nom-j&#39;ai-d%C3%A9j%C3%A0-choisi-(apr%C3%A8s-tout...)-%3A&quot;&gt;Le nom j&#39;ai déjà choisi (après tout...) : &lt;a class=&quot;direct-link&quot; href=&quot;#le-nom-j&#39;ai-d%C3%A9j%C3%A0-choisi-(apr%C3%A8s-tout...)-%3A&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Get-cAzureRMVMOs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;gt;Personnellement, j&#39;essaye de mettre un indicateur &amp;quot;c&amp;quot; pour &amp;quot;custom&amp;quot; sur mes functions pour les différencier des autres.&lt;/p&gt;
&lt;h3 id=&quot;la-connexion-%C3%A0-azure&quot;&gt;La connexion à Azure &lt;a class=&quot;direct-link&quot; href=&quot;#la-connexion-%C3%A0-azure&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;J&#39;utilise un petit bout de script que j&#39;ai récupéré (je ne sais plus où, si l&#39;auteur se manifeste !)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Check-AzureRMSession () {
$Error.Clear()
#if context already exist
try {
Get-AzureRmVM -ErrorAction Stop | Out-Null
}
catch [System.Management.Automation.PSInvalidOperationException] {
Login-AzureRmAccount
}
$Error.Clear();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En gros, c&#39;est simple, si on est connecté, il se passe rien, sinon on nous demande notre login. Simple, Efficace...&lt;/p&gt;
&lt;h3 id=&quot;le-script-en-lui-m%C3%AAme&quot;&gt;Le script en lui même &lt;a class=&quot;direct-link&quot; href=&quot;#le-script-en-lui-m%C3%AAme&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Function Get-cAzureRMVMOs {
[CmdletBinding()]
param(

)
Check-AzureRMSession
$vms = get-azurermvm
foreach ($vm in $vms) {
$osprofile = $($vm.OSProfile)
if ($($osprofile.LinuxConfiguration) -eq $null) {
$OsType = &amp;amp;quot;Windows&amp;amp;quot;
}
elseif ($($osprofile.WindowsConfiguration) -eq $null) {
$OsType = &amp;amp;quot;Linux&amp;amp;quot;
}
else {
$OsType = $osprofile
}
[PSCustomObject]@{
AvailabilitySetReference = $vm.AvailabilitySetReference
DiagnosticsProfile = $vm.DiagnosticsProfile
DisplayHint = $vm.DisplayHint
Extensions = $vm.Extensions
HardwareProfile = $vm.HardwareProfile
Id = $vm.Id
Identity = $vm.Identity
InstanceView = $vm.InstanceView
LicenseType = $vm.LicenseType
Location = $vm.Location
Name = $vm.Name
NetworkProfile = $vm.NetworkProfile
OSType = $OsType
Plan = $vm.Plan
ProvisioningState = $vm.ProvisioningState
RequestId = $vm.RequestId
ResourceGroupName = $vm.ResourceGroupName
StatusCode = $vm.StatusCode
StorageProfile = $vm.StorageProfile
Tags = $vm.Tags
Type = $vm.Type
VmId = $vm.VmId
}
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Résultat ?&lt;/h3&gt;
&lt;img class=&quot;alignnone size-full wp-image-282&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/get-cazurevmos-8-Cool.png&quot; alt=&quot;&quot; width=&quot;1168&quot; height=&quot;487&quot;&gt;
&lt;p&gt;Ca fonctionne ! et le filtre ?&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-283&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/get-cazurevmos-9-youpi.png&quot; alt=&quot;&quot; width=&quot;1167&quot; height=&quot;436&quot;&gt;
&lt;p&gt;Du coup, avec notre super fonction, on peut filtrer comme on voulait :)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
Get-cAzureRMVMOsType |?{ $_.OsType -eq &amp;amp;quot;Windows&amp;amp;quot; }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;blockquote&gt;PS: Ce sript fonctionne très bien avec AzureRM.NetCore sur macOs :&lt;img class=&quot;alignnone size-full wp-image-285&quot; style=&quot;font-size: 18px;&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/get-cazurevmos-10-youpi.png&quot; alt=&quot;&quot; width=&quot;1058&quot; height=&quot;196&quot;&gt;&lt;span style=&quot;font-size: 18px;&quot;&gt;  &lt;/span&gt;&lt;/blockquote&gt;</content>
	</entry>
	
	<entry>
		<title>[Update] Azure Cloud Shell &amp;#8211; Pleins de nouveautés ! (Et du gros) &amp;#8211; Powershell is Coming !</title>
		<link href="/2017/09/25/azure-cloud-shell-pleins-de-nouveautes-et-du-gros/"/>
		<updated>2017-09-25T14:48:42+02:00</updated>
		<id>/2017/09/25/azure-cloud-shell-pleins-de-nouveautes-et-du-gros/</id>
		<content type="html">&lt;p&gt;Bonjour à tous,&lt;/p&gt;
&lt;p&gt;Si vous utilisez Azure, il y a de grandes chances que vous ayez aperçu Cloud Shell. Ce qui est moins sur c&#39;est que vous ayez vu que pas mal de petits outils on été récemment intégrés !&lt;img class=&quot;alignnone size-full wp-image-248&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/cloudshell-containers.png&quot; alt=&quot;&quot; width=&quot;1658&quot; height=&quot;193&quot;&gt;&lt;/p&gt;
&lt;p&gt;Au menu : Docker, Kubectl, Git, Terraform .. et pleins d&#39;autres !&lt;/p&gt;
&lt;p&gt;Pour avoir une liste complète exécuter, faites un petit tour dans votre PATH...&lt;/p&gt;
&lt;p&gt;Pour ma part j&#39;ai trouvé pas mal de choses interressantes notemment, un client SSH, Powershell version 6 beta 7,&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-247&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/cloudshell-ps.png&quot; alt=&quot;&quot; width=&quot;690&quot; height=&quot;103&quot;&gt;
&lt;p&gt;Et voila :&lt;/p&gt;
&lt;img class=&quot;alignnone size-full wp-image-249&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/Cloud-Shell.png&quot; alt=&quot;&quot; width=&quot;1625&quot; height=&quot;907&quot;&gt;
&lt;img class=&quot;alignnone size-full wp-image-252&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/download.png&quot; alt=&quot;&quot; width=&quot;240&quot; height=&quot;240&quot;&gt;
&lt;p&gt;[update] Powershell va arriver en Public Preview ! &lt;a href=&quot;https://azure.microsoft.com/en-us/blog/powershell-comes-to-azure-cloud-shell/&quot;&gt;https://azure.microsoft.com/en-us/blog/powershell-comes-to-azure-cloud-shell/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>[update] Project Honolulu Public Preview &amp;#8211; Mon retour</title>
		<link href="/2017/09/24/project-honolulu-public-preview-mon-retour/"/>
		<updated>2017-09-24T21:12:41+02:00</updated>
		<id>/2017/09/24/project-honolulu-public-preview-mon-retour/</id>
		<content type="html">&lt;h1&gt;Intro&lt;/h1&gt;
Au cas ou vous auriez raté l&#39;annonce concernant le projet Honolulu qui vise à remplacer les MMC de nos servers Windows, je vous invite à regarder les quelques liens ci-dessous pour en savoir plus :
&lt;ul&gt;
 	&lt;li&gt;https://seyfallah-it.blogspot.fr/2017/09/honolulu-project.html&lt;/li&gt;
 	&lt;li&gt;aka.ms/honoluludownload&lt;/li&gt;
 	&lt;li&gt;https://blogs.technet.microsoft.com/askpfeplat/2017/09/20/project-honolulu-a-new-windows-server-management-experience-for-the-software-defined-datacenter-part-1/&lt;/li&gt;
 	&lt;li&gt;https://gotoguy.blog/2017/09/24/secure-access-to-project-honolulu-with-azure-ad-app-proxy-and-conditional-access/&lt;/li&gt;
&lt;/ul&gt;
Pour ma part, voici mon retour sur cette nouveauté, d&#39;un prime abord, c&#39;est excellent, un simple MSI à installer et on peut commencer à ajouter ses serveurs dans l&#39;interface. Génial ça fonctionne depuis mon téléphone, depuis mon Mac... Bref, c&#39;est génial!
&lt;h1&gt;Quelques trucs cools :&lt;/h1&gt;
&lt;ul&gt;
 	&lt;li&gt;l&#39;affichage des VMs :&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;alignnone wp-image-226&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/vm.png&quot; alt=&quot;&quot; width=&quot;1541&quot; height=&quot;249&quot;&gt;
&lt;ul&gt;
 	&lt;li&gt;ASR (Azure Site Recovery) Automatisé :&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;alignnone wp-image-227&quot; src=&quot;https://etienne.deneuve.xyz/wp-content/uploads/2017/09/Honolu.png&quot; alt=&quot;&quot; width=&quot;1710&quot; height=&quot;922&quot;&gt;
&lt;p&gt;(Bon, y en a pleins d&#39;autres, je vous laisse des surprises #nospoil)&lt;/p&gt;
&lt;h1&gt;Les trucs que j&#39;aurais aimés :&lt;/h1&gt;
&lt;ul&gt;
 	&lt;li&gt;Dans l&#39;installer proposer directement un certificat let&#39;s encrypt plutôt qu&#39;un auto-signé (2017!)&lt;/li&gt;
 	&lt;li&gt;Au niveau de l&#39;import :&lt;/li&gt;
 	&lt;li&gt;
&lt;ul&gt;
 	&lt;li&gt;L&#39;import des servers depuis l&#39;AD et le DNS (à la 2012)&lt;/li&gt;
 	&lt;li&gt;L&#39;import des VM (Windows) existantes dans Azure&lt;/li&gt;
 	&lt;li&gt;Ajout des machines virtuelles lors de l&#39;ajout de serveurs avec installé Hyper V&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
 	&lt;li&gt;La création d&#39;une vault pour stocker ses &quot;Credentials&quot; (à la cmdkey /add), pour sélectionner ensuite le compte que l&#39;on souhaite.&lt;/li&gt;
 	&lt;li&gt;L&#39;absence de centralisation (à la 2012), il aurait été cool d&#39;avoir une overview complète comme celle-ci.&lt;/li&gt;
 	&lt;li&gt;L&#39;absence de Powershell Launcher, ça aurait été cool de pouvoir lancer des commandes Powershell depuis cette interface.&lt;/li&gt;
 	&lt;li&gt;Pas de containers, j&#39;aime bien les containers moi, j&#39;aurais aimé trouver une petite interface comme Cockpit sur Fedora : &lt;img src=&quot;https://bobcares.com/wp-content/uploads/2015/08/docker-management-ui.png&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
Voici les éléments pour les quels j&#39;ai voté sur le User Voice Honolulu : https://windowsserver.uservoice.com/users/674735389-etienne-deneuve
&lt;h1&gt;Ma petite conclusion:&lt;/h1&gt;
Et vous ? Vous l&#39;avez essayé déjà ? Qu&#39;en pensez-vous ? La direction est bonne, un moteur d&#39;extensions (https://github.com/hongtao-chen/hello-honolulu) est déjà prévu, et presque en place... On va pouvoir arrêter de mettre des GUI sur tous les serveurs ?</content>
	</entry>
	
	<entry>
		<title>Azure Networking – TP – Part 2 &amp;#8211; vNet Peering</title>
		<link href="/2017/04/27/azure-networking-tp-part-2/"/>
		<updated>2017-04-27T14:00:06+02:00</updated>
		<id>/2017/04/27/azure-networking-tp-part-2/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/lopesmickael&quot;&gt;Mickael Lopes&lt;/a&gt; et moi avons animé une session au Global Azure Bootcamp intitulée : &amp;quot;Le réseau dans Azure : Cas d&#39;usage et Retour d&#39;expériences&amp;quot;.&lt;br&gt;
Les slides de  notre session sont dispo sur slideshare ici : &lt;a href=&quot;https://www.slideshare.net/MickaelLOPES91/gab-le-rseau-dans-azure&quot;&gt;Slideshare de Mickael&lt;/a&gt;&lt;br&gt;
Comme prévu, voici des TP pour aller avec notre présentation, a faire vous même :)&lt;br&gt;
Ce post est la suite de la partie 1, qui part du principe que vous avez déjà la partie 1 de faite sur votre tenant, dans toutes les versions (Powershell, Azure Cli 2.0 et ARM Template).&lt;/p&gt;
&lt;h1&gt;vNet Peering&lt;/h1&gt;
L&#39;objectif est de connecter nos 3 Vnets, avec nos 3 outils :
&lt;ul&gt;
 	&lt;li&gt;vnet-test-ps&lt;/li&gt;
 	&lt;li&gt;vnet-test-az&lt;/li&gt;
 	&lt;li&gt;vnet-test-json&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Powershell&lt;/h2&gt;
Nous allons créer le lien entre vnet-test-ps et vnet-test-az :
&lt;pre&gt;&lt;code class=&quot;lang-powershell&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$vnetPS&lt;/span&gt; = &lt;span class=&quot;hljs-pscommand&quot;&gt;Get-AzureRmVirtualNetwork&lt;/span&gt;&lt;span class=&quot;hljs-parameter&quot;&gt; -ResourceGroupName RG-Vnet-Exo-PS&lt;span class=&quot;hljs-parameter&quot;&gt; -Name &lt;/span&gt;vnet-test-ps&lt;/span&gt;
&lt;span class=&quot;hljs-variable&quot;&gt;$vnetAZ&lt;/span&gt; = &lt;span class=&quot;hljs-pscommand&quot;&gt;Get-AzureRmVirtualNetwork&lt;/span&gt;&lt;span class=&quot;hljs-parameter&quot;&gt; -ResourceGroupName RG-Vnet-Exo-AZ -Name &lt;/span&gt;vnet-test-az&lt;/code&gt;&lt;/pre&gt;
Puis nous créons le lien PS2AZ :
&lt;pre&gt;&lt;code class=&quot;lang-powershell&quot;&gt;&lt;span class=&quot;hljs-pscommand&quot;&gt;Add-AzureRmVirtualNetworkPeering&lt;/span&gt;&lt;span class=&quot;hljs-parameter&quot;&gt; -Name &lt;/span&gt;PS2AZ&lt;span class=&quot;hljs-parameter&quot;&gt; -VirtualNetwork &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$vnetPS&lt;/span&gt;&lt;span class=&quot;hljs-parameter&quot;&gt; -RemoteVirtualNetworkId &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$vnetAZ&lt;/span&gt;.Id
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-powershell&quot;&gt;&lt;span class=&quot;hljs-pscommand&quot;&gt;Add-AzureRmVirtualNetworkPeering&lt;/span&gt;&lt;span class=&quot;hljs-parameter&quot;&gt; -Name &lt;/span&gt;AZ2PS&lt;span class=&quot;hljs-parameter&quot;&gt; -VirtualNetwork &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$vnetAZ&lt;/span&gt;&lt;span class=&quot;hljs-parameter&quot;&gt; -RemoteVirtualNetworkId &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$vnetPS&lt;/span&gt;.Id&lt;/code&gt;&lt;/pre&gt;
nous pouvons vérifié si le peering est fonctionnel via la commande Powershell :
&lt;pre&gt;&lt;code class=&quot;lang-powershell&quot;&gt; &lt;span class=&quot;hljs-pscommand&quot;&gt;Get-AzureRmVirtualNetworkPeering&lt;/span&gt;&lt;span class=&quot;hljs-parameter&quot;&gt; -VirtualNetworkName &lt;/span&gt;vnetPS&lt;span class=&quot;hljs-parameter&quot;&gt; -ResourceGroupName &lt;/span&gt;vnetPS&lt;span class=&quot;hljs-parameter&quot;&gt; -Name &lt;/span&gt;PS2AZ&lt;/code&gt;&lt;/pre&gt;
en l&#39;état, notre peering est configuré mais certaines options ne sont pas activées :
&lt;ul&gt;
 	&lt;li&gt;Forwarded Traffic&lt;/li&gt;
 	&lt;li&gt;Gateway Transit&lt;/li&gt;
 	&lt;li&gt;Remote Gateways&lt;/li&gt;
&lt;/ul&gt;
Dans notre cas, nous avons besoin d&#39;activer le transfert du trafic.
&lt;pre&gt;&lt;code class=&quot;lang-powershell&quot;&gt;$ps2az = &lt;span class=&quot;hljs-pscommand&quot;&gt;Get-AzureRmVirtualNetworkPeering&lt;/span&gt;&lt;span class=&quot;hljs-parameter&quot;&gt; -VirtualNetworkName &lt;/span&gt;vnetPS&lt;span class=&quot;hljs-parameter&quot;&gt; -ResourceGroupName &lt;/span&gt;vnetPS&lt;span class=&quot;hljs-parameter&quot;&gt; -Name &lt;/span&gt;PS2AZ
&lt;span class=&quot;hljs-variable&quot;&gt;$&lt;/span&gt;ps2az.AllowForwardedTraffic = &lt;span class=&quot;hljs-literal&quot;&gt;$true
&lt;/span&gt;&lt;span class=&quot;hljs-pscommand&quot;&gt;Set-AzureRmVirtualNetworkPeering&lt;/span&gt;&lt;span class=&quot;hljs-parameter&quot;&gt; -VirtualNetworkPeering &lt;/span&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$&lt;/span&gt;ps2az&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Azure CLI 2.0&lt;/h2&gt;
Avec Azure CLI, il faudra recupéré l&#39;id du réseau distant pour le peering avec la commande :
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;az network vnet list -g RG-Vnet-Exo-JSON&lt;/code&gt;&lt;/pre&gt;
et vous recuperez un objets json, cherchez votre id qui sera du type :
[code]/subscriptions/VOTREIDDESOUSCRPTION/resourceGroups/RG-Vnet-Exo-JSON/providers/Microsoft.Network/virtualNetworks/vnet-test-json[/code]
&lt;p&gt;Si vous utilisez le bash (Ubuntu on Windows par exemple) créer une variable comme ceci :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;JSON_VNET_ID=&quot;/subscriptions/VOTREIDDESOUSCRPTION/resourceGroups/RG-Vnet-Exo-JSON/providers/Microsoft.Network/virtualNetworks/vnet-test-json&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ce sera beaucoup plus simple pour l&#39;appeler dans la commande suivante :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt; az network vnet peering create --name AZ2JSON \
   --remote-vnet-id ${$JSON_VNET_ID} \
   --resource-group RG-Vnet-Exo-AZ \
   --vnet-name vnet-test-az \ 
   --allow-forwarded-traffic \
   --allow-vnet-access \
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Théoriquement, nous pourrions executer la commande pour effectuer le peering dans l&#39;autre sens, mais nous allons la faire avec notre template de la partie 1.&lt;/p&gt;
&lt;h2&gt;ARM Template&lt;/h2&gt;
Pour déclarer un vnet peering dans un template ARM, à l&#39;heure actuelle, via le portail ou la ligne de commande (Powershell ou Azure CLI 2.0) il n&#39;est pas possible dans le &quot;contexte&quot; de manipuler deux Resource Group. Du coup, il faut le faire d&#39;un coté puis de l&#39;autre, ou utiliser des templates &quot;nested&quot; c&#39;est à dire un template &quot;parent&quot; puis deux &quot;enfants&quot;. Nous n&#39;allons (pas encore ;)) aborder ce type de template. (Stay Tuned !)
&lt;p&gt;Donc, reprenons notre template et ajoutons un nouveau type de resource Azure &amp;quot;Microsoft.Network/virtualNetworks/virtualNetworkPeerings&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{
&quot;$schema&quot;: &quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&quot;,
&quot;contentVersion&quot;: &quot;1.0.0.0&quot;,
&quot;parameters&quot;: {
&quot;vnetname&quot;: {
&quot;type&quot;: &quot;string&quot;,
&quot;metadata&quot;: {
&quot;description&quot;: &quot;Nom du Vnet&quot;
},
&quot;defaultValue&quot;: &quot;vnet-test-json&quot;
},
&quot;vNetRemote&quot;: {
&quot;type&quot;: &quot;string&quot;,
&quot;metadata&quot;: {
&quot;description&quot;: &quot;Nom du Vnet distant&quot;
},
&quot;defaultValue&quot;: &quot;vnet-test-az&quot;
},
&quot;RGvNetRemote&quot;: {
&quot;type&quot;: &quot;string&quot;,
&quot;metadata&quot;: {
&quot;description&quot;: &quot;Nom du Resource Group&quot;
},
&quot;defaultValue&quot;: &quot;RG-Vnet-Exo-AZ&quot;
},
&quot;addressSpacePrefix&quot;: {
&quot;type&quot;: &quot;string&quot;,
&quot;metadata&quot;: {
&quot;description&quot;: &quot;IP v4 (RFC1918)&quot;
},
&quot;defaultValue&quot;: &quot;10.0.2.0/24&quot;
},
&quot;subnetName&quot;: {
&quot;type&quot;: &quot;string&quot;,
&quot;metadata&quot;: {
&quot;description&quot;: &quot;Nom du Subnet&quot;
},
&quot;defaultValue&quot;: &quot;jsonfrontend&quot;
},
&quot;subnetPrefix&quot;: {
&quot;type&quot;: &quot;string&quot;,
&quot;metadata&quot;: {
&quot;description&quot;: &quot;IP v4 du Subnet&quot;
},
&quot;defaultValue&quot;: &quot;10.0.2.0/26&quot;
}
},
&quot;variables&quot;: {},
&quot;resources&quot;: [
{
&quot;apiVersion&quot;: &quot;2015-06-15&quot;,
&quot;type&quot;: &quot;Microsoft.Network/virtualNetworks&quot;,
&quot;name&quot;: &quot;[parameters(&#39;VnetName&#39;)]&quot;,
&quot;location&quot;: &quot;[resourceGroup().location]&quot;,
&quot;tags&quot;: {
&quot;displayName&quot;: &quot;JSON-VNET&quot;
},
&quot;properties&quot;: {
&quot;addressSpace&quot;: {
&quot;addressPrefixes&quot;: [
&quot;[parameters(&#39;addressSpacePrefix&#39;)]&quot;
]
},
&quot;subnets&quot;: [
{
&quot;name&quot;: &quot;[parameters(&#39;subnetName&#39;)]&quot;,
&quot;properties&quot;: {
&quot;addressPrefix&quot;: &quot;[parameters(&#39;subnetPrefix&#39;)]&quot;
}
}
]
}
},
{
&quot;apiVersion&quot;: &quot;2017-03-01&quot;,
&quot;type&quot;: &quot;Microsoft.Network/virtualNetworks/virtualNetworkPeerings&quot;,
&quot;name&quot;: &quot;[concact( parameters(&#39;VnetName&#39;) , &#39;/JSON2AZ&#39;)]&quot;,
&quot;location&quot;: &quot;[resourceGroup().location]&quot;,
&quot;properties&quot;: {
&quot;allowVirtualNetworkAccess&quot;: true,
&quot;allowForwardedTraffic&quot;: true,
&quot;allowGatewayTransit&quot;: false,
&quot;useRemoteGateways&quot;: false,
&quot;remoteVirtualNetwork&quot;: {
&quot;id&quot;: &quot;[resourceId( subscription().subscriptionid, parameters(&#39;RGvNetRemote&#39;) , &#39;Microsoft.Network/virtualNetworks&#39;, parameters(&#39;vNetRemote&#39;))]&quot;
}
}
}
],
&quot;outputs&quot;: {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La méthode de déploiement reste la même que dans la partie 1.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Azure Networking &amp;#8211; TP &amp;#8211; Part 1 &amp;#8211; vNets &amp;#038; Subnets</title>
		<link href="/2017/04/25/azure-networking-tp-part-1/"/>
		<updated>2017-04-25T13:00:26+02:00</updated>
		<id>/2017/04/25/azure-networking-tp-part-1/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/lopesmickael&quot;&gt;Mickael Lopes&lt;/a&gt; et moi avons animé une session au Global Azure Bootcamp intitulée : &amp;quot;Le réseau dans Azure : Cas d&#39;usage et Retour d&#39;expériences&amp;quot;.&lt;/p&gt;
&lt;p&gt;Les slides de  notre session sont dispo sur slideshare ici : &lt;a href=&quot;https://www.slideshare.net/MickaelLOPES91/gab-le-rseau-dans-azure&quot;&gt;Slideshare de Mickael&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comme prévu, voici des TP pour aller avec notre présentation, a faire vous même :)&lt;/p&gt;
&lt;h1&gt;Les vNets et Subnets&lt;/h1&gt;
Avant d&#39;attaquer des éléments plus complexe, nous allons apprendre a créer un VNet avec un subnet avec les trois moyens disponibles sur Azure.
&lt;h2&gt;Powershell&lt;/h2&gt;
Avant de se lancer, commencez par installer votre station de travail convenablement avec la doc Microsoft qui va bien : &lt;a href=&quot;https://docs.microsoft.com/fr-fr/powershell/azureps-cmdlets-docs&quot;&gt;Powershell for Azure&lt;/a&gt;
&lt;p&gt;Dans Azure, on commence toujours par créer un Resource Group donc :&lt;/p&gt;
&lt;pre&gt;New-AzureRmResourceGroup `
-Name RG-Vnet-Exo-PS `
-Location northeurope&lt;/pre&gt;
&lt;p&gt;Ensuite nous allons créer un vNet :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-powershell&quot;&gt;$vnetexo = New-AzureRmVirtualNetwork -ResourceGroupName RG-Vnet-Exo-PS `
-Name vnet-test-ps `
-AddressPrefix 10.0.0.0/24 `
-Location northeurope&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;puis afin d&#39;ajouter un subnet :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-powershell&quot;&gt;Add-AzureRmVirtualNetworkSubnetConfig -Name psfrontend `
-VirtualNetwork $vnetexo `
-AddressPrefix 10.0.0.0/26
Set-AzureRmVirtualNetwork -VirtualNetwork $vnetexo&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Azure CLI 2.0&lt;/h2&gt;
Comme pour la partie Powershell, suivez la doc d&#39;installation de Azure CLI 2.0 ici : &lt;a href=&quot;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli&quot;&gt;Azure CLI 2.0&lt;/a&gt;
Comme dans l&#39;exemple précédent nous allons créer un Resource Group :
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;az group create \
--name RG-Vnet-Exo-AZ \
--location northeurope
&lt;/code&gt;&lt;/pre&gt;
Ensuite nous allons créer un vNet et le subnet :
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;az network vnet create \
--name vnet-test-az \
--resource-group RG-Vnet-Exo-AZ \
--location northeurope \
--address-prefixes 10.0.1.0/24 \
--subnet-name azfrontend \
--subnet-prefixes 10.0.1.0/26
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;ARM Template&lt;/h2&gt;
Pour commencer, utilisez un éditeur de texte un peu évoluer, le JSON sans outil, ca pique un peu... Je vous recommande Visual Studio Code, avec ce petit article : &lt;a href=&quot;https://etienne.deneuve.xyz/2017/01/26/visual-studio-code-pour-ansible-terraform/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;sur mon blog&lt;/a&gt;
Un Template Json simple contient plusieurs parties : &quot;variables&quot;, &quot;parameters&quot;, &quot;resources&quot; et &quot;outputs&quot;. Sans réexpliquer l&#39;ensemble, voici à quoi notre Template va ressembler :
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{
  &quot;$schema&quot;: &quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&quot;,
  &quot;contentVersion&quot;: &quot;1.0.0.0&quot;,
  &quot;parameters&quot;: {
    &quot;vnetname&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;metadata&quot;: {
        &quot;description&quot;: &quot;Nom du Vnet&quot;
      },
      &quot;defaultValue&quot;: &quot;vnet-test-json&quot;
    },
    &quot;vnetname&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;metadata&quot;: {
        &quot;description&quot;: &quot;Nom du Vnet&quot;
      },
      &quot;defaultValue&quot;: &quot;vnet-test-json&quot;
    },
    &quot;addressSpacePrefix&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;metadata&quot;: {
        &quot;description&quot;: &quot;IP v4 (RFC1918)&quot;
      },
      &quot;defaultValue&quot;: &quot;10.0.2.0/24&quot;
    },
    &quot;subnetName&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;metadata&quot;: {
        &quot;description&quot;: &quot;Nom du Subnet&quot;
      },
      &quot;defaultValue&quot;: &quot;jsonfrontend&quot;
    },
    &quot;subnetPrefix&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;metadata&quot;: {
        &quot;description&quot;: &quot;IP v4 du Subnet&quot;
      },
      &quot;defaultValue&quot;: &quot;10.0.2.0/26&quot;
    }
  },
  &quot;variables&quot;: {},
  &quot;resources&quot;: [
    {
      &quot;apiVersion&quot;: &quot;2015-06-15&quot;,
      &quot;type&quot;: &quot;Microsoft.Network/virtualNetworks&quot;,
      &quot;name&quot;: &quot;[parameters(&#39;VnetName&#39;)]&quot;,
      &quot;location&quot;: &quot;[resourceGroup().location]&quot;,
      &quot;tags&quot;: {
        &quot;displayName&quot;: &quot;JSON-VNET&quot;
      },
      &quot;properties&quot;: {
        &quot;addressSpace&quot;: {
          &quot;addressPrefixes&quot;: [
            &quot;[parameters(&#39;addressSpacePrefix&#39;)]&quot;
          ]
        },
        &quot;subnets&quot;: [
          {
            &quot;name&quot;: &quot;[parameters(&#39;subnetName&#39;)]&quot;,
            &quot;properties&quot;: {
              &quot;addressPrefix&quot;: &quot;[parameters(&#39;subnetPrefix&#39;)]&quot;
            }
          }
        ]
      }
    }
  ],
  &quot;outputs&quot;: {}
}&lt;/code&gt;&lt;/pre&gt;
Ensuite pour déployer ce fichier soit via le portail avec la doc ici : &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-template-deploy-portal&quot;&gt;Azure Template &amp;amp; Portal&lt;/a&gt;
ou alors via Powershell et Azure CLI 2.0 :
&lt;h5&gt;Powershell :&lt;/h5&gt;
&lt;pre&gt;New-AzureRmResourceGroup -Name RG-Vnet-Exo-JSON `
   -Location &quot; North Europe&quot;
New-AzureRmResourceGroupDeployment -Name RG-Vnet-Exo-JSON `
   -ResourceGroupName ExampleResourceGroup `
   -TemplateFile c:\MyTemplates\vnet-simple.json&lt;/pre&gt;
&lt;h5&gt;Azure CLI 2.0:&lt;/h5&gt;
&lt;pre&gt;az group create --name RG-XXX --location &quot;North Europe“
az group deployment create \
--name ExampleDeployment \
--resource-group ExampleGroup \
--template-file vnet-simple.json&lt;/pre&gt;</content>
	</entry>
	
	<entry>
		<title>Azure et le backup ? (d&amp;#8217;un Mac)</title>
		<link href="/2017/03/14/azure-et-le-backup-dun-mac/"/>
		<updated>2017-03-14T23:29:37+01:00</updated>
		<id>/2017/03/14/azure-et-le-backup-dun-mac/</id>
		<content type="html">&lt;p&gt;Un petit article &amp;quot;Quick &amp;amp; very very dirty&amp;quot; qui est soyons honnêtes complètement inutile.&lt;/p&gt;
&lt;p&gt;Mais quand c&#39;est inutile, c&#39;est possible que ce soit fun !&lt;/p&gt;
&lt;p&gt;/!\ Disclaimer : Je suis pas responsable de vos données perdues ! /!\&lt;/p&gt;
&lt;iframe class=&quot;giphy-embed&quot; src=&quot;//giphy.com/embed/ULsH97rqqbf68?html5=true&quot; width=&quot;480&quot; height=&quot;269&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;http://giphy.com/gifs/nuke-atomic-bomb-a-ULsH97rqqbf68&quot;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Pré-requis&lt;/h3&gt;
Du crédit Azure, un Mac avec Sierra.
&lt;!--more--&gt;
&lt;h3&gt;Azure Side&lt;/h3&gt;
&lt;h4&gt;Préparation sur un Mac :&lt;/h4&gt;
Comme on est sur macOs, on va commencer par utiliser le CLI azure, dispo ici : &lt;a href=&quot;http://aka.ms/mac-azure-cli&quot;&gt;Programme d’installation Mac OS X&lt;/a&gt; (aka.ms/mac-azure-cli). Je vous passe la bête installation Next Next Finish...
&lt;p&gt;Une fois bien installé sur le macOs, ouvrez le terminal lancez les commandes suivantes :&lt;/p&gt;
&lt;p&gt;[code]azure login[/code]&lt;/p&gt;
&lt;p&gt;suivez le liens &lt;a href=&quot;https://aka.ms/devicelogin&quot;&gt;https://aka.ms/devicelogin&lt;/a&gt; avec le code généré dans le terminal&lt;/p&gt;
&lt;p&gt;puis vérifiez vos informations de facturation avec :&lt;/p&gt;
&lt;p&gt;[code]azure account show[/code]&lt;/p&gt;
&lt;h4&gt;Création de l&#39;environnement Azure :&lt;/h4&gt;
On crée un petit resource group qui va bien (c&#39;est du Poc Quick &amp;amp; very Dirty, mais on est pas des sauvages !)
&lt;p&gt;[code]azure group create RG_Backup NorthEurope[/code]&lt;/p&gt;
&lt;p&gt;et si tout se passe bien :&lt;/p&gt;
&lt;pre&gt;info:    Executing command group create
+ Getting resource group RG_Backup
+ Creating resource group RG_Backup
info:    Created resource group RG_Backup
data:    Id:                  /subscriptions/XXXXXXXXXXXX/resourceGroups/RG_Backup
data:    Name:                RG_Backup
data:    Location:            northeurope
data:    Provisioning State:  Succeeded
data:    Tags: null
data:
info:    group create command OK
&lt;/pre&gt;
&lt;p&gt;On va créer maintenant un compte de stockage :&lt;/p&gt;
&lt;pre&gt;azure storage account create stobackupmac \
--kind Storage \
--sku-name LRS \
--resource-group RG_BACKUP \
--location NorthEurope
&lt;/pre&gt;
&lt;p&gt;Normalement, si tout va bien on a un petit message &amp;quot;info: storage account create command OK&amp;quot;, continuons, nous avons besoin d&#39;une clé sur ce compte de stockage :&lt;br&gt;
[code]azure storage account keys list stobackupmac -g RG_Backup[/code]&lt;br&gt;
on récupère des clefs d&#39;accès ici :&lt;/p&gt;
&lt;pre&gt;info:    Executing command storage account keys list
+ Getting storage account keys                                                 
data:    Name  Key                                                                                       Permissions
data:    ----  ----------------------------------------------------------------------------------------  -----------
data:    key1  ONsztQjA44F+S+ffVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXTNROw1yPOQdcHVynXOOt3g==  Full       
data:    key2  dppNGuvyIn1li/ffVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXTNROw1yPOQdcHVynXOOt3g==  Full       
info:    storage account keys list command OK
&lt;/pre&gt;
&lt;p&gt;Maintenant, on crée un partage Azure :&lt;br&gt;
Le plus simple, c&#39;est de créer des variables d&#39;environnement pour se simplifier l&#39;exécution des commandes qui vont suivre :&lt;/p&gt;
&lt;pre&gt;export AZURE_STORAGE_ACCOUNT=stobackupmac
export AZURE_STORAGE_ACCESS_KEY=dppNGuvyIn1li/ffVXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXTNROw1yPOQdcHVynXOOt3g==&lt;/pre&gt;
&lt;p&gt;Ainsi on peut maintenant taper la commande suivante :&lt;/p&gt;
&lt;p&gt;[code]azure storage share create --share sharebkp --quota 100[/code]&lt;/p&gt;
&lt;p&gt;Ce qui nous donnera &amp;quot;info:    storage share create command OK&amp;quot; et donc, c&#39;est prêt !&lt;/p&gt;
&lt;h3&gt;Mac Side&lt;/h3&gt;
Connectons le mac avec le Share dans Azure. Je suppose que le port TCP 445 est ouvert en sortie de chez vous.
&lt;p&gt;Ouvrez le Finder puis Menu &amp;quot;Aller&amp;quot;, &amp;quot;Se connecter au serveur...&amp;quot; (ou Command + K)&lt;/p&gt;
&lt;p&gt;Indiquez : smb://sharebkp@stobackupmac.file.core.windows.net/sharebkp (si vous avez tout suivi)&lt;/p&gt;
&lt;p&gt;au prompt du mot de passe, indiquez &amp;quot;sharebkp&amp;quot; et une des clés comme celle exportée dans &amp;quot;AZURE_STORAGE_ACCESS_KEY&amp;quot;. Normalement, vous devriez le voir dans le Finder correctement.&lt;/p&gt;
&lt;p&gt;On arrête la partie graphique du mac et on retourne dans un terminal :&lt;/p&gt;
&lt;pre&gt;cd /Volumes/sharebkp
#création du SparseBundle
hdiutil create \
-library NONE \
-fs HFS+ \
-volname &quot;Azure Time Machine&quot; \
-encryption AES-128 \ #Attention, oubliez pas le mot de passe !
-size 99g \
MacBookPro-Etienne.sparsebundle
&lt;/pre&gt;
&lt;p&gt;Maintenant, allez allumer la cafetière, lancer un détartrage, nettoyez la, faites un café, ca devrait être prêt...&lt;br&gt;
Si tout est bien prêt, avec le Finder, double cliquer sur l&#39;image SparseBundle, vous devriez la retrouver dans &amp;quot;/Volumes/Azure\ Time\ Machine/&amp;quot;, retournons dans le terminal :&lt;/p&gt;
&lt;pre&gt;sudo tmutil setdestination /Volumes/Azure\ Time\ Machine/
&lt;/pre&gt;
&lt;p&gt;Et Hop, Time Machine sur Azure !&lt;br&gt;
(oui, je sais ;))&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Vorlon.js : Un petit billet pour un gentil copain dev !</title>
		<link href="/2017/02/03/vorlon-js-un-petit-billet-pour-un-gentil-copain-dev/"/>
		<updated>2017-02-03T00:21:19+01:00</updated>
		<id>/2017/02/03/vorlon-js-un-petit-billet-pour-un-gentil-copain-dev/</id>
		<content type="html">&lt;p&gt;J&#39;ai un copain dev&#39; (pas qu&#39;un) mais celui ma demandé il y a quelques jours:&lt;/p&gt;
&lt;ul&gt;
 	&lt;li&gt;Lui : &quot;Tu sais, tu m&#39;a parlé de Vorlon.js, c&#39;est cool mais comment on change le binding, localhost m&#39;en tape un peu&quot;&lt;/li&gt;
 	&lt;li&gt;Moi : &quot;Bouge pas, je te donne ca&quot;&lt;/li&gt;
 	&lt;li&gt;Lui : &quot;Y disent qu&#39;il faut Nginx etc, (bref un gentil dev web en panique)&quot;&lt;/li&gt;
 	&lt;li&gt;Moi : &quot;Mais non mais non&quot;&lt;/li&gt;
&lt;/ul&gt;
Bon déjà Vorlon.js c&#39;est quoi ? C&#39;est un outil plutot orienté Dev, pas que web, fait par une bande de dev chez Microsoft, dont David Catuhe, Etienne Magraff, Julien Corioland, David Rousset et pleins d&#39;autres que vous pouvez trouver (je vous mets pas tout ici, ca ferait trop de noms !) &lt;a href=&quot;https://github.com/MicrosoftDX/Vorlonjs/graphs/contributors&quot;&gt;ici&lt;/a&gt; sur le github de Microsoft DX. Cet outil est une promesse :
&lt;blockquote&gt;A new, open source, extensible, platform-agnostic tool for remotely debugging and testing your JavaScript. Powered by node.js and socket.io.
&lt;p&gt;Understand all about Vorlon.js in 20 minutes watching this video : &lt;a href=&quot;https://channel9.msdn.com/Shows/codechat/046&quot;&gt;&lt;u&gt;&lt;span style=&quot;color: #0066cc;&quot;&gt;https://channel9.msdn.com/Shows/codechat/046&lt;/span&gt;&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;
Deja, ca vient de Microsoft, moi j&#39;aime bien (&amp;lt;3 Linux aussi, pas de jaloux), le logo c&#39;est un soucoupe mode retro gaming, ca peut que être fun, le site il est ici : &lt;a href=&quot;http://vorlonjs.com/&quot;&gt;http://vorlonjs.com/&lt;/a&gt; . Bref, je l&#39;installe sur mon mac pour dépanner le copain.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;la doc me dit &amp;quot;nodejs&amp;quot;, ok ben on commence par installer nodejs, depuis leur site : &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;https://nodejs.org/en/download/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ca s&#39;installe en mode IT Guys (le mauvais, pas le bon) &amp;quot;Click Next, Click Next, Click Finish&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;span class=&quot;pl-s1&quot;&gt;sudo npm i -g vorlon
sudo vorlon
&lt;span class=&quot;pl-mo&quot;&gt;With the server is running, open http://localhost:1337 in your browser to see the Vorlon.JS dashboard.
&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Tiens comme la doc dis donc (et le copain dev du début)!&lt;br&gt;
Je suis pas forcément un grand habitué de npm et de node en général mais je sais comment la commande find fonctionne donc je lance une petite recherche de vorlon qui se trouve dans /usr/local/lib/node_modules/vorlon et dedans je retrouve le dossier Server (que j&#39;avais repéré dans le git avec un fichier de config en json qui s&#39;appelle config.json. (limpide !)&lt;/p&gt;
&lt;p&gt;Sachant qu&#39;on cherche comment changer le binding de &amp;quot;localhost&amp;quot;, je me dis &amp;quot;comment ont ils pu appeler le host&amp;quot;, c&#39;est host tout simplement, donc je change par mon fichier par  :&lt;/p&gt;
&lt;pre&gt;{
    &quot;baseURL&quot;: &quot;&quot;,
    &quot;useSSLAzure&quot;: false,
    &quot;useSSL&quot;: false,
    &quot;SSLkey&quot;: &quot;cert/server.key&quot;,
    &quot;SSLcert&quot;: &quot;cert/server.crt&quot;,
    &quot;activateAuth&quot;: false,
    &quot;username&quot;: &quot;&quot;,
    &quot;password&quot;: &quot;&quot;,
    &quot;host&quot;: &quot;toto&quot;,
    &quot;port&quot;: 1337,
    &quot;enableWebproxy&quot;: true,
[...] }&lt;/pre&gt;
&lt;p&gt;je teste (oui c&#39;est bien aussi les tests!)&lt;/p&gt;
&lt;pre&gt;sudo vorlon
With the server is running, open http://toto:1337 in your browser to see the Vorlon.JS dashboard.
&lt;/pre&gt;
&lt;p&gt;Bref, tout ça pour dire, franchement les gars, votre Vorlon.js c&#39;est vachement cool !&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Installation de Nginx en reverse proxy avec réecriture du HTML
</title>
		<link href="/2017/02/02/installation-de-nginx-en-reverse-proxy-avec-reecriture-du-html/"/>
		<updated>2017-02-02T23:30:06+01:00</updated>
		<id>/2017/02/02/installation-de-nginx-en-reverse-proxy-avec-reecriture-du-html/</id>
		<content type="html">&lt;h1 id=&quot;nginx&quot;&gt;Nginx &lt;a class=&quot;direct-link&quot; href=&quot;#nginx&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Nginx est un serveur Web modulaire qui fonctionne très bien en reverse proxy et possède de nombreuses possibilités. De plus il est très léger, je vous invite à consulter leur site : &lt;a href=&quot;http://nginx.org/&quot;&gt;www.nginx.org&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;la-probl%C3%A9matique&quot;&gt;La problématique &lt;a class=&quot;direct-link&quot; href=&quot;#la-probl%C3%A9matique&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Un client avait un site internet assez mal écrit avec beaucoup d&#39;url en dur dans le code et qui aurait nécessité beaucoup trop de temps pour le remettre en conformité.&lt;br&gt;
l&#39;idée est de ré-écrire les urls dans les pages transmises par le serveur Web, en l&#39;occurrence un serveur Apache (pas à jour !).&lt;br&gt;
Nous aurions pu utiliser un vrai reverse proxy (Kemp, F5..) afin de faire la même chose mais le client n&#39;en dispose pas et l&#39;investissement pour une seule machine virtuelle était un peu surdimensionné. Si la machine était dans &lt;a href=&quot;https://azure.microsoft.com/fr-fr/&quot;&gt;Azure&lt;/a&gt;, nous aurions pu utiliser les nombreuses briques présentes dans la solution de Cloud Microsoft. l&#39;idée est donc de ré-écrire les pages à la volées lors de la transmission avec le client.&lt;/p&gt;
&lt;h2 id=&quot;solution-mise-en-place&quot;&gt;Solution mise en place &lt;a class=&quot;direct-link&quot; href=&quot;#solution-mise-en-place&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nous avons choisi d&#39;installer un serveur Nginx sur une machine virtuelle Centos 7, cette installation est donc reproductible chez vous sur un système Centos, Red Hat ou Fedora&lt;/p&gt;
&lt;h3 id=&quot;installation-de-nginx&quot;&gt;Installation de Nginx &lt;a class=&quot;direct-link&quot; href=&quot;#installation-de-nginx&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Nginx est présent dans les dépots Centos mais la version proposée ne dispose pas du module de substitution dont nous avons besoin. Il faut donc passer par la compilation, et donc installer les outils nécessaires comme ci-dessous :&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;yum &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; gcc-c++ &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  pcre-devel &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  zlib-devel &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  openssl-devel &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  libxml2-devel &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  libxslt-devel &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  gd-devel &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  perl-ExtUtils-Embed &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  GeoIP-devel &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  gperftools-devel &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite on récupère les sources de Nginx depuis le site de Nginx :&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; http://nginx.org/download/nginx-1.10.1.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; -xvf nginx-1.10.1.tar.gz&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comme l&#39;extension &amp;quot;http subsitution filter&amp;quot; module n&#39;est pas un module &amp;quot;officiel&amp;quot;, il faut le récupérer sur le GitHub de yaoweibin :&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone git://github.com/yaoweibin/ngx_http_substitutions_filter_module.git  &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite on configure le make :&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; nginx-1.10.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  ./configure &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --user&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;nginx                          &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --group&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;nginx                         &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --prefix&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/etc/nginx                   &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --sbin-path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/sbin/nginx           &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --conf-path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/etc/nginx/nginx.conf     &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --pid-path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/var/run/nginx.pid         &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --lock-path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/var/run/nginx.lock       &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --error-log-path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/var/log/nginx/error.log &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --http-log-path&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/var/log/nginx/access.log &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --with-http_gzip_static_module        &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --with-http_stub_status_module        &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --with-http_ssl_module                &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --with-pcre                           &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --with-file-aio                       &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --with-http_realip_module             &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --without-http_scgi_module            &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --without-http_uwsgi_module           &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --without-http_fastcgi_module &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        --add-module&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/tmp/ngx_http_substitutions_filter_module&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On lance le make&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;configuration-de-nginx&quot;&gt;Configuration de Nginx &lt;a class=&quot;direct-link&quot; href=&quot;#configuration-de-nginx&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Il faut créer un compte dédié a Nginx, faire tourner un serveur Web en root étant largement déconseillé (oui oui, il parait) :&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useradd&lt;/span&gt; -r nginx&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comme notre Nginx est une version compilée, nous devons créer un fichier de service conforme à systemd :&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;[Unit]&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Description=The NGINX HTTP and reverse proxy server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;After=syslog.target network.target remote-fs.target nss-lookup.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Type=forking&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;PIDFile=/var/run/nginx.pid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ExecStartPre=/usr/sbin/nginx -t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ExecStart=/usr/sbin/nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ExecReload=/bin/kill -s HUP &lt;span class=&quot;token variable&quot;&gt;$MAINPID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ExecStop=/bin/kill -s QUIT &lt;span class=&quot;token variable&quot;&gt;$MAINPID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;PrivateTmp=true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;[Install]&lt;/span&gt;&lt;br&gt;WantedBy=multi-user.target&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;gt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; /lib/systemd/system/nginx.service&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comme on est pas des gros bourrins, on configure firewalld via firewall-cmd :&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;firewall-cmd --zone&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;public --add-port&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;/tcp --permanent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;firewall-cmd --reload&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et bien sur on vérifie que les règles sont appliquées :&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;iptables-save &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;cr%C3%A9ation-de-la-r%C3%A8gles-de-r%C3%A9%C3%A9criture&quot;&gt;Création de la règles de réécriture &lt;a class=&quot;direct-link&quot; href=&quot;#cr%C3%A9ation-de-la-r%C3%A8gles-de-r%C3%A9%C3%A9criture&quot;&gt; &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Par défaut, le fichier de configuration Nginx est situé dans le dossier que nous avons mentionné dans la partie &lt;code&gt;--prefix=/etc/nginx&lt;/code&gt;, soit &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;&lt;br&gt;
Remplacez la partie &lt;code&gt;server {...}&lt;/code&gt; par celle ci :&lt;/p&gt;
&lt;pre class=&quot;language-nginx&quot;&gt;&lt;code class=&quot;language-nginx&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;listen&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;server_name&lt;/span&gt;     localhost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                        old&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;domainquonveut&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;access_log&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;var&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;log&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;nginx&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;oldsite&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;access&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log  main&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;error_log&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;var&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;log&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;nginx&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;oldsite&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log  main&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token keyword&quot;&gt;proxy_pass&lt;/span&gt;      &lt;span class=&quot;token keyword&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ancienserveur&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#ipduserveur&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token keyword&quot;&gt;proxy_set_header&lt;/span&gt; Host www&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;vhostduapache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token keyword&quot;&gt;proxy_set_header&lt;/span&gt; Accept&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Encoding &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                subs_filter www&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;domaineendurdanslecodequinousplaitpas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com old&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;domainquonveut&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;com gi&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                subs_filter www&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;domaineendurdanslecodequinousplaitpas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fr old&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;domainquonveut&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fr gi&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;proxy_pass : c&#39;est l&#39;option qui permet de forwarder le traffic entrant vers le serveur Apache&lt;br&gt;
proxy_set_header : c&#39;est l&#39;option qui permet de modifier le header envoyé au serveur Web&lt;br&gt;
Host : dans notre cas on veut changer le Host présent dans le header afin de corrigé celui appelé par l&#39;utilisateur.&lt;br&gt;
Accept-Encoding : On utilise également &amp;quot;Accept-Encoding &amp;quot;&amp;quot;;&amp;quot; afin de forcer le serveur Apache a ne pas utiliser la compression gzip des pages, car sinon, le module ne pourra pas ré-récrire les objets.&lt;br&gt;
subs_filter : la syntaxe est très simple &amp;quot;stringquidoitdisparaitre&amp;quot; &amp;quot;stringquidoitapparaitre&amp;quot; gi&lt;br&gt;
le paramètre gi sert à indiquer que nous souhaitons ré-écrire tout (toute les occurrences), le i pour case insensitive, afin de le récupérer sans tenir compte de la casse.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Dans la partie &amp;quot;Accept-Encoding&amp;quot;, je mentionne qu&#39;il faut désactiver la compression gzip, pour deux raisons :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Niveau ressources, ca sert à rien de compresser deux fois la même donnée, ca sera pas plus petit (bah ouais...)&lt;/li&gt;
&lt;li&gt;Le module de substitution ne gère pas la décompression à la volée, puisqu&#39;il analyse les fichiers plats et remplace les occurences des strings qu&#39;on souhaite dégager.&lt;/li&gt;
&lt;li&gt;Lorsqu&#39;on mets en place un reverse proxy, on peut vouloir mettre en cache certains éléments pour décharger les serveurs web, afin de pas leurs demander 10 fois à la seconde la même image (le logo de la boite par exemple), dès lors si les serveurs web envoient du flux compressé, il ne pourra pas le faire correctement.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;les-cas-d&#39;usage&quot;&gt;Les cas d&#39;usage &lt;a class=&quot;direct-link&quot; href=&quot;#les-cas-d&#39;usage&quot;&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Utiliser ce type de module peut être interressant, par exemple, sur un Wordpress de test. En effet, Wordpress stocke dans la base l&#39;url d&#39;accès, et l&#39;envoie dans quelques pages, rien de bien méchant! Du coup, avec cette petite manipulation, vous pouvez avoir un Wordpress de test qui serait une copie 100% identique à votre prod&#39;, juste avec un petit copier coller de la VM ou une autre technique :)&lt;/p&gt;
&lt;p&gt;Dans le cas de mon blog, si je souhaite mettre en place une copie de mon site avec par exemple comme url &amp;quot;test.deneuve.xyz&amp;quot; sans rien toucher (en dehors d&#39;une petite copie) je devrai faire un nginx.conf tel que :&lt;/p&gt;
&lt;pre class=&quot;language-nginx&quot;&gt;&lt;code class=&quot;language-nginx&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;listen&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;server_name&lt;/span&gt;     localhost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                        test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;deneuve&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xyz&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;access_log&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;var&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;log&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;nginx&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;access&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log  main&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;error_log&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;var&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;log&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;nginx&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log  main&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token keyword&quot;&gt;proxy_pass&lt;/span&gt;      &lt;span class=&quot;token keyword&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#ipduserveurbidon&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token keyword&quot;&gt;proxy_set_header&lt;/span&gt; Host etienne&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;deneuve&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xyz&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token keyword&quot;&gt;proxy_set_header&lt;/span&gt; Accept&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Encoding &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                subs_filter etienne&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;deneuve&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xyz test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;deneuve&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;xyz gi&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>[Updated 20/03/2017] Visual Studio Code pour Ansible, Terraform</title>
		<link href="/2017/01/26/visual-studio-code-pour-ansible-terraform/"/>
		<updated>2017-01-26T23:42:55+01:00</updated>
		<id>/2017/01/26/visual-studio-code-pour-ansible-terraform/</id>
		<content type="html">&lt;h1 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code &lt;a class=&quot;direct-link&quot; href=&quot;#visual-studio-code&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;L&#39;Infrastructure as Code, c&#39;est des méthodes et des outils pour faire des infrastructures reproductibles à l&#39;infini.&lt;/p&gt;
&lt;p&gt;J&#39;utilise quelques outils sur mes deux postes de travail principaux : un pc sous Windows 10 et un mac sous macOs Sierra. J&#39;ai donc besoin d&#39;outils qui peuvent fonctionner sur les deux plateformes sans &amp;quot;galère&amp;quot; et efficace sur les deux plateformes.&lt;/p&gt;
&lt;p&gt;J&#39;utilise &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; qui est gratuit, dispo sur Windows, Linux et macOs.&lt;/p&gt;
&lt;p&gt;Voici quelques plugins que j&#39;ai installé :&lt;/p&gt;
&lt;ol&gt;
 	&lt;li&gt;Ansible:
&lt;ol&gt;
 	&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=timonwong.ansible-autocomplete&quot;&gt;Ansible-Autocomplete&lt;/a&gt;&lt;/li&gt;
 	&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=haaaad.ansible&quot;&gt;&lt;span class=&quot;ux-item-name&quot; data-bind=&quot;text: itemName&quot;&gt;Language-Ansible&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
 	&lt;li&gt;Terraform:
&lt;ol&gt;
 	&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=mindginative.terraform-snippets&quot;&gt;&lt;span class=&quot;ux-item-name&quot; data-bind=&quot;text: itemName&quot;&gt;Advanced Terraform Snippets Generator&lt;/span&gt; &lt;/a&gt;&lt;/li&gt;
 	&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=mauve.terraform&quot;&gt;Terraform&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
 	&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell&quot;&gt;Powershell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;del&gt;En terme de configuration j&#39;ai ajouté les changements suivants dans le fichier settings.json :&lt;/del&gt;
&lt;pre&gt;&lt;del&gt;{
&quot;workbench.statusBar.visible&quot;: true,
&quot;editor.rulers&quot;: [80,100],
&quot;editor.tabSize&quot;: 2,
&quot;editor.insertSpaces&quot;: true,
&quot;editor.detectIndentation&quot;: true,
&quot;editor.wrappingColumn&quot;: 150,
&quot;terraform.path&quot;: &quot;C:\\Users\\edeneuve\\Desktop\\terraform.exe&quot;,
&quot;extensions.autoUpdate&quot;: false,
&quot;window.zoomLevel&quot;: 4
}&lt;/del&gt;&lt;/pre&gt;
[Update 20/03/2017] Je viens de publier, dans mon repository GitHub, deux éléments :
&lt;ol&gt;
 	&lt;li&gt;arm-snippets.json :
Il s&#39;agit de quelques snippet vscode a ajouter dans json.json via Ctrl+P (cmd sur mac :)) &quot;&amp;gt; Extrait de code utilisateurs&quot; puis sélectionner JSON et coller le contenu du fichier dedans...
pour utiliser ces snippets, taper tout simplement &quot;arm-ed&quot; et vous aurez la liste :)&lt;/li&gt;
 	&lt;li&gt;settings.json
Il s&#39;agit tout simplement de mon fichier de settings de vscode, je le mets a jours souvent !&lt;/li&gt;
&lt;/ol&gt;
&amp;nbsp;</content>
	</entry>
	
	<entry>
		<title>Get ink level from HP printers in Powershell
</title>
		<link href="/2016/01/15/get-ink-level-from-hp-printers-in-powershell/"/>
		<updated>2016-01-15T10:58:06+01:00</updated>
		<id>/2016/01/15/get-ink-level-from-hp-printers-in-powershell/</id>
		<content type="html">&lt;p&gt;I&#39;ve find a way to get details about cardrige on low end hp printer !&lt;/p&gt;
&lt;p&gt;Get it on my Git ! &lt;a href=&quot;https://github.com/EtienneDeneuve/Powershell/blob/master/HpPrinter/Snippet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HP Snippet &lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;$Web = New-object System.Net.WebClient
[xml]$stringprinter = $Web.DownloadString(&quot;http://printerhp/DevMgmt/ConsumableConfigDyn.xml&quot;)
$stringprinter.ConsumableConfigDyn.ConsumableInfo | Select ConsumableLabelCode,ConsumablePercentageLevelRemaining 
&lt;/pre&gt;</content>
	</entry>
	
	<entry>
		<title>Get-NextTrain !</title>
		<link href="/2015/12/16/get-nexttrain/"/>
		<updated>2015-12-16T14:44:50+01:00</updated>
		<id>/2015/12/16/get-nexttrain/</id>
		<content type="html">&lt;h1 id=&quot;let&#39;s-play-with-sncf-api-and-powershell-!&quot;&gt;Let&#39;s play with SNCF Api and Powershell ! &lt;a class=&quot;direct-link&quot; href=&quot;#let&#39;s-play-with-sncf-api-and-powershell-!&quot;&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;My goal was to get a list of the next train in the train station near my home, from powershell...&lt;/p&gt;
&lt;p&gt;My functions are below, feel free to leave a comment, copy it, it&#39;s free ! (Now on Github ! &lt;a href=&quot;https://github.com/EtienneDeneuve/Powershell/blob/master/GetNextTrain/TheScript.ps1&quot;&gt;git it !&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Of course, it&#39;s not a serious post, but more is coming ;)&lt;/p&gt;
&lt;p&gt;You can try this :&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Get&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;gare &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;gare &lt;span class=&quot;token string&quot;&gt;&quot;clamart&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;idgare &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; Get&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;TrainDirection &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Get&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NextTrain &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;idgare &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;idgare &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;traindirection &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;direction &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;ETADeparture Direction ETAArrival ETAinMin &lt;span class=&quot;token keyword&quot;&gt;From&lt;/span&gt; GareName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;-&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 13:49:00 Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Paris&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 13:49:00 0:1:18 Rambouillet vers Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 gare de Clamart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:04:00 Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Paris&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:04:00 0:16:18 Mantes&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;la&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Jolie vers Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 gare de Clamart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:19:00 Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Paris&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:19:00 0:31:18 Rambouillet vers Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 gare de Clamart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:34:00 Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Paris&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:34:00 0:46:18 Plaisir&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Grignon vers Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 gare de Clamart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:49:00 Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Paris&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:49:00 1:1:18 Rambouillet vers Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 gare de Clamart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 13:57:00 Mantes&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;la&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Jolie &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Mantes&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;la&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Jolie&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 13:57:00 0:9:18 Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 vers Mantes&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;la&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Jolie gare de Clamart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:57:00 Mantes&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;la&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Jolie &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Mantes&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;la&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Jolie&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:57:00 1:9:18 Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 vers Mantes&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;la&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Jolie gare de Clamart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:12:00 Rambouillet &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Rambouillet&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:12:00 0:24:17 Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 vers Rambouillet gare de Clamart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:42:00 Rambouillet &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Rambouillet&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:42:00 0:54:17 Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 vers Rambouillet gare de Clamart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:27:00 Plaisir&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Grignon &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Plaisir&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 16&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;12&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;2015 14:27:00 0:39:18 Paris&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Montparnasse 1&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;2 vers Plaisir&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Grignon gare de Clamart&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;Function&lt;/span&gt; Get&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;NextTrain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;[cmdletbinding()]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;[Parameter(Mandatory = $true, ValueFromPipeline=$true)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$idgare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;[Parameter(Mandatory = $true, ValueFromPipeline=$true)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$traindirection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$apikey&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&#39;YourApiKeyfromapisncfwebsite&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$datenow&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-date&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Format yyyyMMddTHHmmss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$params2&lt;/span&gt; = @&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;uri = &lt;span class=&quot;token string&quot;&gt;&quot;https://api.sncf.com/v1/coverage/sncf/stop_areas/&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$idgare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;/departures?from_datetime=&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$datenow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;               Method = &lt;span class=&quot;token string&quot;&gt;&#39;Get&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#(or POST, or whatever)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;               Headers = @&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Authorization = &lt;span class=&quot;token string&quot;&gt;&#39;Basic &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;[Convert]&lt;/span&gt;::ToBase64String&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;[Text.Encoding]&lt;/span&gt;::ASCII&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GetBytes&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$apikey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#end headers hash table&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#end $params hash table&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token variable&quot;&gt;$string&lt;/span&gt; = @&lt;span class=&quot;token string&quot;&gt;&quot;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Liste des prochains trains pour {0} en provenance de {1} doit arriver a la {2} a {3} et partir a {4}&lt;/span&gt;&lt;br&gt;&quot;&lt;/span&gt;@&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$var2&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;invoke-restmethod&lt;/span&gt; @params2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$alltrain&lt;/span&gt; = &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;@&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$departure&lt;/span&gt; in $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$var2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;departures&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$departure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;display_informations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;direction &lt;span class=&quot;token operator&quot;&gt;-like&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$traindirection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token variable&quot;&gt;$direction&lt;/span&gt; = $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$departure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;display_informations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;direction &lt;span class=&quot;token operator&quot;&gt;-replace&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gare de &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-replace&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 1-2 (Paris)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token namespace&quot;&gt;[datetime]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$convertarrival&lt;/span&gt; = ConvertTo&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;SncfDateTime &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;sncfdate $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$departure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stop_date_time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;arrival_date_time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token namespace&quot;&gt;[datetime]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$convertdeparture&lt;/span&gt; = ConvertTo&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;SncfDateTime &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;sncfdate $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$departure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stop_date_time&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;departure_date_time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token namespace&quot;&gt;[timespan]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$timefromnow&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;NEW-TIMESPAN&lt;/span&gt; –&lt;span class=&quot;token function&quot;&gt;Start&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get-date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; –&lt;span class=&quot;token keyword&quot;&gt;End&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$convertarrival&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token variable&quot;&gt;$hash&lt;/span&gt; = @&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        Direction = $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;From&lt;/span&gt; = $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$departure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;route&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        GareName = $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$departure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stop_point&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        ETAArrival = $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$convertarrival&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        ETADeparture =  $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$convertdeparture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        ETAinMin =  &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$timefromnow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Hours&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$timefromnow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Minutes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$timefromnow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Seconds&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token variable&quot;&gt;$Object&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;New-Object&lt;/span&gt; PSObject &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Property &lt;span class=&quot;token variable&quot;&gt;$hash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token variable&quot;&gt;$alltrain&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$alltrain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;Function&lt;/span&gt; Get&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;TrainDirection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token namespace&quot;&gt;[cmdletbinding()]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;[Parameter(Mandatory = $true, ValueFromPipeline=$true)]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$idgare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$apikey&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&#39;YourApiKeyfromapisncfwebsite&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$datenow&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-date&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Format yyyyMMddTHHmmss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$params2&lt;/span&gt; = @&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;uri = &lt;span class=&quot;token string&quot;&gt;&quot;https://api.sncf.com/v1/coverage/sncf/stop_areas/&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$idgare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;/departures?from_datetime=&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$datenow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                   Method = &lt;span class=&quot;token string&quot;&gt;&#39;Get&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#(or POST, or whatever)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                   Headers = @&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Authorization = &lt;span class=&quot;token string&quot;&gt;&#39;Basic &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;[Convert]&lt;/span&gt;::ToBase64String&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;[Text.Encoding]&lt;/span&gt;::ASCII&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GetBytes&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$apikey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;           &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#end headers hash table&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#end $params hash table&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$var2&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;invoke-restmethod&lt;/span&gt; @params2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$direction&lt;/span&gt; = &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;@&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$departure&lt;/span&gt; in $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$var2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;departures&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token variable&quot;&gt;$hash&lt;/span&gt; = @&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        Direction = $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$departure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;display_informations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;direction&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ToString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        idgare = $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$idgare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token variable&quot;&gt;$Object&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;New-Object&lt;/span&gt; PSObject &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Property &lt;span class=&quot;token variable&quot;&gt;$hash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token variable&quot;&gt;$direction&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$direction&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Select-Object&lt;/span&gt; idgare&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;direction &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Unique  &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Skip 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;Function&lt;/span&gt; Get&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Gare&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$gare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$apikey&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&#39;YourApiKeyfromapisncfwebsite&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$params&lt;/span&gt; = @&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;uri = &lt;span class=&quot;token string&quot;&gt;&quot;https://api.sncf.com/v1/coverage/sncf/places?q=&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$gare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;               Method = &lt;span class=&quot;token string&quot;&gt;&#39;Get&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#(or POST, or whatever)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;               Headers = @&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Authorization = &lt;span class=&quot;token string&quot;&gt;&#39;Basic &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;[Convert]&lt;/span&gt;::ToBase64String&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;[Text.Encoding]&lt;/span&gt;::ASCII&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GetBytes&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$apikey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#end headers hash table&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#end $params hash table&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$var&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;invoke-restmethod&lt;/span&gt; @params&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$stoparea&lt;/span&gt; in $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;places &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;embedded_type &lt;span class=&quot;token operator&quot;&gt;-eq&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;stop_area&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token variable&quot;&gt;$hash&lt;/span&gt; = @&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        Direction = $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$stoparea&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        idgare = $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$stoparea&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token variable&quot;&gt;$Object&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;New-Object&lt;/span&gt; PSObject &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Property &lt;span class=&quot;token variable&quot;&gt;$hash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$Object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; ConvertTo&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;SncfDateTime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token variable&quot;&gt;$sncfdate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$sncfyear&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$sncfdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Substring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;4&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$sncfmonth&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$sncfdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Substring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$sncfday&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$sncfdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Substring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;6&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$sncfhour&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$sncfdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Substring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;9&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$sncfminute&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$sncfdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Substring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;11&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$sncfsecond&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$sncfdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Substring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;13&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$datetime&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-date&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Year &lt;span class=&quot;token variable&quot;&gt;$sncfyear&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Day &lt;span class=&quot;token variable&quot;&gt;$sncfday&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Month &lt;span class=&quot;token variable&quot;&gt;$sncfmonth&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Hour &lt;span class=&quot;token variable&quot;&gt;$sncfhour&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Second &lt;span class=&quot;token variable&quot;&gt;$sncfsecond&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Minute &lt;span class=&quot;token variable&quot;&gt;$sncfminute&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Write-Output&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$datetime&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
</feed>
